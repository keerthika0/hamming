import { ChangeDetectorRef, OnInit, AfterViewInit, OnDestroy, EventEmitter, ElementRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
export declare class SliderLightboxComponent implements OnInit, AfterViewInit, OnDestroy {
    private cdRef;
    private sanitizer;
    private elRef;
    private document;
    totalImages: number;
    nextImageIndex: number;
    popupWidth: number;
    marginLeft: number;
    imageFullscreenView: boolean;
    lightboxPrevDisable: boolean;
    lightboxNextDisable: boolean;
    showLoading: boolean;
    effectStyle: string;
    speed: number;
    title: string;
    currentImageIndex: number;
    private swipeLightboxImgCoord?;
    private swipeLightboxImgTime?;
    lightboxDiv: any;
    lightboxImageDiv: any;
    images: Array<object>;
    imageIndex: number;
    show: boolean;
    videoAutoPlay: boolean;
    direction: string;
    paginationShow: boolean;
    animationSpeed: number;
    infinite: boolean;
    arrowKeyMove: boolean;
    showVideoControls: boolean;
    close: EventEmitter<any>;
    prevImage: EventEmitter<any>;
    nextImage: EventEmitter<any>;
    onResize(event: any): void;
    handleKeyboardEvent(event: KeyboardEvent): void;
    constructor(cdRef: ChangeDetectorRef, sanitizer: DomSanitizer, elRef: ElementRef, document: any);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setPopupSliderWidth(): void;
    closeLightbox(): void;
    prevImageLightbox(): void;
    nextImageLightbox(): void;
    nextPrevDisable(): void;
    applyButtonDisableCondition(): void;
    getImageData(): void;
    resetState(): void;
    /**
     * Swipe event handler
     * Reference from https://stackoverflow.com/a/44511007/2067646
     */
    swipeLightboxImg(e: TouchEvent, when: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SliderLightboxComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SliderLightboxComponent, "slider-lightbox", never, { "images": "images"; "videoAutoPlay": "videoAutoPlay"; "direction": "direction"; "paginationShow": "paginationShow"; "infinite": "infinite"; "arrowKeyMove": "arrowKeyMove"; "showVideoControls": "showVideoControls"; "imageIndex": "imageIndex"; "show": "show"; "animationSpeed": "animationSpeed"; }, { "close": "close"; "prevImage": "prevImage"; "nextImage": "nextImage"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWxpZ2h0Ym94LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzbGlkZXItbGlnaHRib3guY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNsaWRlckxpZ2h0Ym94Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI7XG4gICAgcHJpdmF0ZSBlbFJlZjtcbiAgICBwcml2YXRlIGRvY3VtZW50O1xuICAgIHRvdGFsSW1hZ2VzOiBudW1iZXI7XG4gICAgbmV4dEltYWdlSW5kZXg6IG51bWJlcjtcbiAgICBwb3B1cFdpZHRoOiBudW1iZXI7XG4gICAgbWFyZ2luTGVmdDogbnVtYmVyO1xuICAgIGltYWdlRnVsbHNjcmVlblZpZXc6IGJvb2xlYW47XG4gICAgbGlnaHRib3hQcmV2RGlzYWJsZTogYm9vbGVhbjtcbiAgICBsaWdodGJveE5leHREaXNhYmxlOiBib29sZWFuO1xuICAgIHNob3dMb2FkaW5nOiBib29sZWFuO1xuICAgIGVmZmVjdFN0eWxlOiBzdHJpbmc7XG4gICAgc3BlZWQ6IG51bWJlcjtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGN1cnJlbnRJbWFnZUluZGV4OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBzd2lwZUxpZ2h0Ym94SW1nQ29vcmQ/O1xuICAgIHByaXZhdGUgc3dpcGVMaWdodGJveEltZ1RpbWU/O1xuICAgIGxpZ2h0Ym94RGl2OiBhbnk7XG4gICAgbGlnaHRib3hJbWFnZURpdjogYW55O1xuICAgIGltYWdlczogQXJyYXk8b2JqZWN0PjtcbiAgICBpbWFnZUluZGV4OiBudW1iZXI7XG4gICAgc2hvdzogYm9vbGVhbjtcbiAgICB2aWRlb0F1dG9QbGF5OiBib29sZWFuO1xuICAgIGRpcmVjdGlvbjogc3RyaW5nO1xuICAgIHBhZ2luYXRpb25TaG93OiBib29sZWFuO1xuICAgIGFuaW1hdGlvblNwZWVkOiBudW1iZXI7XG4gICAgaW5maW5pdGU6IGJvb2xlYW47XG4gICAgYXJyb3dLZXlNb3ZlOiBib29sZWFuO1xuICAgIHNob3dWaWRlb0NvbnRyb2xzOiBib29sZWFuO1xuICAgIGNsb3NlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcmV2SW1hZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG5leHRJbWFnZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25SZXNpemUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlS2V5Ym9hcmRFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLCBzYW5pdGl6ZXI6IERvbVNhbml0aXplciwgZWxSZWY6IEVsZW1lbnRSZWYsIGRvY3VtZW50OiBhbnkpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBzZXRQb3B1cFNsaWRlcldpZHRoKCk6IHZvaWQ7XG4gICAgY2xvc2VMaWdodGJveCgpOiB2b2lkO1xuICAgIHByZXZJbWFnZUxpZ2h0Ym94KCk6IHZvaWQ7XG4gICAgbmV4dEltYWdlTGlnaHRib3goKTogdm9pZDtcbiAgICBuZXh0UHJldkRpc2FibGUoKTogdm9pZDtcbiAgICBhcHBseUJ1dHRvbkRpc2FibGVDb25kaXRpb24oKTogdm9pZDtcbiAgICBnZXRJbWFnZURhdGEoKTogdm9pZDtcbiAgICByZXNldFN0YXRlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU3dpcGUgZXZlbnQgaGFuZGxlclxuICAgICAqIFJlZmVyZW5jZSBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NDUxMTAwNy8yMDY3NjQ2XG4gICAgICovXG4gICAgc3dpcGVMaWdodGJveEltZyhlOiBUb3VjaEV2ZW50LCB3aGVuOiBzdHJpbmcpOiB2b2lkO1xufVxuIl19
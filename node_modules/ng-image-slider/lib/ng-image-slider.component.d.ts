import { ChangeDetectorRef, OnInit, OnChanges, DoCheck, SimpleChanges, AfterViewInit, OnDestroy, EventEmitter, ElementRef } from '@angular/core';
import { NgImageSliderService } from './ng-image-slider.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgImageSliderComponent implements OnChanges, OnInit, DoCheck, AfterViewInit, OnDestroy {
    private cdRef;
    private platformId;
    imageSliderService: NgImageSliderService;
    private elRef;
    sliderMainDivWidth: number;
    imageParentDivWidth: number;
    imageObj: Array<object>;
    ligthboxImageObj: Array<object>;
    totalImages: number;
    leftPos: number;
    effectStyle: string;
    speed: number;
    sliderPrevDisable: boolean;
    sliderNextDisable: boolean;
    slideImageCount: number;
    sliderImageWidth: number;
    sliderImageReceivedWidth: number | string;
    sliderImageHeight: number;
    sliderImageReceivedHeight: number | string;
    sliderImageSizeWithPadding: number;
    autoSlideCount: number;
    stopSlideOnHover: boolean;
    autoSlideInterval: any;
    showArrowButton: boolean;
    textDirection: string;
    imageMargin: number;
    private swipeCoord?;
    private swipeTime?;
    sliderMain: any;
    imageDiv: any;
    imageSize: any;
    infinite: boolean;
    imagePopup: boolean;
    direction: string;
    animationSpeed: number;
    images: Array<object>;
    slideImage: any;
    autoSlide: any;
    showArrow: any;
    videoAutoPlay: boolean;
    paginationShow: boolean;
    arrowKeyMove: boolean;
    manageImageRatio: boolean;
    showVideoControls: boolean;
    imageClick: EventEmitter<number>;
    arrowClick: EventEmitter<string>;
    lightboxArrowClick: EventEmitter<object>;
    lightboxClose: EventEmitter<object>;
    ligthboxShow: boolean;
    activeImageIndex: number;
    visiableImageIndex: number;
    onResize(event: any): void;
    handleKeyboardEvent(event: KeyboardEvent): void;
    constructor(cdRef: ChangeDetectorRef, platformId: Object, imageSliderService: NgImageSliderService, elRef: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    setSliderImages(imgObj: any): void;
    setSliderWidth(): void;
    imageOnClick(index: any): void;
    imageAutoSlide(): void;
    imageMouseEnterHandler(): void;
    prev(): void;
    next(): void;
    prevImg(): void;
    nextImg(): void;
    infinitePrevImg(): void;
    infiniteNextImg(): void;
    getVisiableIndex(): void;
    /**
     * Disable slider left/right arrow when image moving
     */
    sliderArrowDisableTeam(): void;
    nextPrevSliderButtonDisable(): void;
    showLightbox(): void;
    close(): void;
    lightboxArrowClickHandler(event: any): void;
    /**
     * Swipe event handler
     * Reference from https://stackoverflow.com/a/44511007/2067646
     */
    swipe(e: TouchEvent, when: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgImageSliderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgImageSliderComponent, "ng-image-slider", never, { "infinite": "infinite"; "imagePopup": "imagePopup"; "images": "images"; "videoAutoPlay": "videoAutoPlay"; "paginationShow": "paginationShow"; "arrowKeyMove": "arrowKeyMove"; "manageImageRatio": "manageImageRatio"; "showVideoControls": "showVideoControls"; "imageSize": "imageSize"; "direction": "direction"; "animationSpeed": "animationSpeed"; "slideImage": "slideImage"; "autoSlide": "autoSlide"; "showArrow": "showArrow"; }, { "imageClick": "imageClick"; "arrowClick": "arrowClick"; "lightboxArrowClick": "lightboxArrowClick"; "lightboxClose": "lightboxClose"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaW1hZ2Utc2xpZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZy1pbWFnZS1zbGlkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgT25Jbml0LCBPbkNoYW5nZXMsIERvQ2hlY2ssIFNpbXBsZUNoYW5nZXMsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0ltYWdlU2xpZGVyU2VydmljZSB9IGZyb20gJy4vbmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdJbWFnZVNsaWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBEb0NoZWNrLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIGltYWdlU2xpZGVyU2VydmljZTogTmdJbWFnZVNsaWRlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBlbFJlZjtcbiAgICBzbGlkZXJNYWluRGl2V2lkdGg6IG51bWJlcjtcbiAgICBpbWFnZVBhcmVudERpdldpZHRoOiBudW1iZXI7XG4gICAgaW1hZ2VPYmo6IEFycmF5PG9iamVjdD47XG4gICAgbGlndGhib3hJbWFnZU9iajogQXJyYXk8b2JqZWN0PjtcbiAgICB0b3RhbEltYWdlczogbnVtYmVyO1xuICAgIGxlZnRQb3M6IG51bWJlcjtcbiAgICBlZmZlY3RTdHlsZTogc3RyaW5nO1xuICAgIHNwZWVkOiBudW1iZXI7XG4gICAgc2xpZGVyUHJldkRpc2FibGU6IGJvb2xlYW47XG4gICAgc2xpZGVyTmV4dERpc2FibGU6IGJvb2xlYW47XG4gICAgc2xpZGVJbWFnZUNvdW50OiBudW1iZXI7XG4gICAgc2xpZGVySW1hZ2VXaWR0aDogbnVtYmVyO1xuICAgIHNsaWRlckltYWdlUmVjZWl2ZWRXaWR0aDogbnVtYmVyIHwgc3RyaW5nO1xuICAgIHNsaWRlckltYWdlSGVpZ2h0OiBudW1iZXI7XG4gICAgc2xpZGVySW1hZ2VSZWNlaXZlZEhlaWdodDogbnVtYmVyIHwgc3RyaW5nO1xuICAgIHNsaWRlckltYWdlU2l6ZVdpdGhQYWRkaW5nOiBudW1iZXI7XG4gICAgYXV0b1NsaWRlQ291bnQ6IG51bWJlcjtcbiAgICBzdG9wU2xpZGVPbkhvdmVyOiBib29sZWFuO1xuICAgIGF1dG9TbGlkZUludGVydmFsOiBhbnk7XG4gICAgc2hvd0Fycm93QnV0dG9uOiBib29sZWFuO1xuICAgIHRleHREaXJlY3Rpb246IHN0cmluZztcbiAgICBpbWFnZU1hcmdpbjogbnVtYmVyO1xuICAgIHByaXZhdGUgc3dpcGVDb29yZD87XG4gICAgcHJpdmF0ZSBzd2lwZVRpbWU/O1xuICAgIHNsaWRlck1haW46IGFueTtcbiAgICBpbWFnZURpdjogYW55O1xuICAgIGltYWdlU2l6ZTogYW55O1xuICAgIGluZmluaXRlOiBib29sZWFuO1xuICAgIGltYWdlUG9wdXA6IGJvb2xlYW47XG4gICAgZGlyZWN0aW9uOiBzdHJpbmc7XG4gICAgYW5pbWF0aW9uU3BlZWQ6IG51bWJlcjtcbiAgICBpbWFnZXM6IEFycmF5PG9iamVjdD47XG4gICAgc2xpZGVJbWFnZTogYW55O1xuICAgIGF1dG9TbGlkZTogYW55O1xuICAgIHNob3dBcnJvdzogYW55O1xuICAgIHZpZGVvQXV0b1BsYXk6IGJvb2xlYW47XG4gICAgcGFnaW5hdGlvblNob3c6IGJvb2xlYW47XG4gICAgYXJyb3dLZXlNb3ZlOiBib29sZWFuO1xuICAgIG1hbmFnZUltYWdlUmF0aW86IGJvb2xlYW47XG4gICAgc2hvd1ZpZGVvQ29udHJvbHM6IGJvb2xlYW47XG4gICAgaW1hZ2VDbGljazogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgYXJyb3dDbGljazogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgbGlnaHRib3hBcnJvd0NsaWNrOiBFdmVudEVtaXR0ZXI8b2JqZWN0PjtcbiAgICBsaWdodGJveENsb3NlOiBFdmVudEVtaXR0ZXI8b2JqZWN0PjtcbiAgICBsaWd0aGJveFNob3c6IGJvb2xlYW47XG4gICAgYWN0aXZlSW1hZ2VJbmRleDogbnVtYmVyO1xuICAgIHZpc2lhYmxlSW1hZ2VJbmRleDogbnVtYmVyO1xuICAgIG9uUmVzaXplKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZUtleWJvYXJkRXZlbnQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgcGxhdGZvcm1JZDogT2JqZWN0LCBpbWFnZVNsaWRlclNlcnZpY2U6IE5nSW1hZ2VTbGlkZXJTZXJ2aWNlLCBlbFJlZjogRWxlbWVudFJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIHNldFNsaWRlckltYWdlcyhpbWdPYmo6IGFueSk6IHZvaWQ7XG4gICAgc2V0U2xpZGVyV2lkdGgoKTogdm9pZDtcbiAgICBpbWFnZU9uQ2xpY2soaW5kZXg6IGFueSk6IHZvaWQ7XG4gICAgaW1hZ2VBdXRvU2xpZGUoKTogdm9pZDtcbiAgICBpbWFnZU1vdXNlRW50ZXJIYW5kbGVyKCk6IHZvaWQ7XG4gICAgcHJldigpOiB2b2lkO1xuICAgIG5leHQoKTogdm9pZDtcbiAgICBwcmV2SW1nKCk6IHZvaWQ7XG4gICAgbmV4dEltZygpOiB2b2lkO1xuICAgIGluZmluaXRlUHJldkltZygpOiB2b2lkO1xuICAgIGluZmluaXRlTmV4dEltZygpOiB2b2lkO1xuICAgIGdldFZpc2lhYmxlSW5kZXgoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIHNsaWRlciBsZWZ0L3JpZ2h0IGFycm93IHdoZW4gaW1hZ2UgbW92aW5nXG4gICAgICovXG4gICAgc2xpZGVyQXJyb3dEaXNhYmxlVGVhbSgpOiB2b2lkO1xuICAgIG5leHRQcmV2U2xpZGVyQnV0dG9uRGlzYWJsZSgpOiB2b2lkO1xuICAgIHNob3dMaWdodGJveCgpOiB2b2lkO1xuICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgbGlnaHRib3hBcnJvd0NsaWNrSGFuZGxlcihldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTd2lwZSBldmVudCBoYW5kbGVyXG4gICAgICogUmVmZXJlbmNlIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ0NTExMDA3LzIwNjc2NDZcbiAgICAgKi9cbiAgICBzd2lwZShlOiBUb3VjaEV2ZW50LCB3aGVuOiBzdHJpbmcpOiB2b2lkO1xufVxuIl19
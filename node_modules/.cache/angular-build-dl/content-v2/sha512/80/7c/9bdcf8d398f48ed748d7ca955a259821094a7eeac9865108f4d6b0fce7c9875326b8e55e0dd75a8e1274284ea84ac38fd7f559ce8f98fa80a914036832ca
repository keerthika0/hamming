{"version":3,"sources":["webpack:///src/app/components/authentication/authentication-routing.module.ts","webpack:///src/app/components/authentication/authentication.module.ts","webpack:///src/app/components/authentication/card-details/card-details.component.ts","webpack:///src/app/components/authentication/card-details/card-details.component.html","webpack:///src/app/components/authentication/email/email.component.ts","webpack:///src/app/components/authentication/email/email.component.html","webpack:///src/app/components/authentication/forgot/forgot.component.ts","webpack:///src/app/components/authentication/forgot/forgot.component.html","webpack:///src/app/components/authentication/login/login.component.ts","webpack:///src/app/components/authentication/login/login.component.html","webpack:///src/app/components/authentication/otp/otp.component.ts","webpack:///src/app/components/authentication/otp/otp.component.html","webpack:///src/app/components/authentication/plans/plans.component.ts","webpack:///src/app/components/authentication/plans/plans.component.html","webpack:///src/app/components/authentication/reset/reset.component.ts","webpack:///src/app/components/authentication/reset/reset.component.html","webpack:///src/app/components/authentication/signup/signup.component.html","webpack:///src/app/components/authentication/signup/signup.component.ts","webpack:///src/app/components/authentication/twitter/twitter.component.ts","webpack:///src/app/components/authentication/twitter/twitter.component.html","webpack:///src/app/helpers/customValidators.ts"],"names":["routes","path","pathMatch","redirectTo","component","AuthenticationRoutingModule","forChild","imports","exports","createTranslateLoader","http","AuthenticationModule","loader","provide","useFactory","deps","declarations","CardDetailsComponent","helper","fb","router","planService","notify","minyear","Date","getFullYear","maxyear","amount","localStorage","getItem","planmonth","i","validateForm","controls","markAsDirty","updateValueAndValidity","valid","val","id","number","value","cardnumber","month","cvc","year","street","city","state","pincode","country","subPlan","subscribe","res","success","navigate","err","error","group","required","maxLength","max","min","minLength","email","LogOut","logOut","submitForm","selector","templateUrl","styleUrls","EmailComponent","authService","message","route","setItem","snapshot","paramMap","get","EmailVerify","VerifyEmail","clear","ForgotComponent","homeservice","ispageLoad","printSrc","PrintScr","getSettings","passwordForm","ForgotPassword","data","getTerms","settingData","user_site_maintainence","LoginComponent","translate","passwordVisible","isLoading","loginForm","password","toLowerCase","Login","g2fEmail","use","document","documentElement","lang","TwitterLogin","isAlreadyLoggedIn","remember","OtpComponent","g2fForm","otp","G2FLogin","PlansComponent","profileService","walletservice","PlanDetail","walletBalance","addAmount","depositamount","depamount","listOfCard","cardnotfound","depositValue","selectCoin","selectCard","deposit","isVisibleDeposit","offer","obj","planId","_id","amounts","validity","GetAppplan","sort","a","b","price","method","GetCardList","wallet","c_id","card_id","GetProfile","profile","length","getPlan","ResetComponent","auth","confirmValidator","control","confirm","passwordValidator","confirmPassword","invalid","ResetPassword","pattern","SignupComponent","countryCode","confirmpasswordVisible","useremail","aggreed","user_name_error","isVisisble","flagurl","endurl","isShow","agree","country_name","category","subcategory","language","languages","signUpForm","agreeValidator","searchTextChanged","userPattern","CategoryList","ind","sub_cat","Cat_id","subcatlist","Sub_id","SubCatList","type","Duplicate","country_code","user_name","mobile","Sex","Sexual_Orientation","Country_name","subcategoryid","subcategory_id","category_id","categoryName","categoryid","adult","emailaddress","domain","substring","lastIndexOf","SignUp","window","sessionStorage","ListLanguage","categoryList","code","imageFlag","dial_code","next","Subcategory","GetLanguages","Search","selectedValue","TwitterComponent","queryParams","oauth_token","LogIn","token","TwitterLoginToken","OtpValidator","test"],"mappings":"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","file":"authentication-authentication-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ResetComponent } from './reset/reset.component';\nimport { TwitterComponent } from './twitter/twitter.component';\nimport { EmailComponent } from './email/email.component';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { OtpComponent } from './otp/otp.component';\nimport { PlansComponent } from './plans/plans.component';\nimport { CardDetailsComponent } from './card-details/card-details.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'login',\n    },\n    {\n        path: 'reset/:id',\n        component: ResetComponent,\n    },\n    {\n        path: 'twitter',\n        component: TwitterComponent,\n    },\n    {\n        path: 'emailVerify/:id',\n        component: EmailComponent,\n    },\n    {\n        path: 'login',\n        component: LoginComponent,\n    },\n    {\n        path: 'signup',\n        component: SignupComponent,\n    },\n    {\n        path: 'forgot',\n        component: ForgotComponent,\n    },\n    {\n        path: 'otp',\n        component: OtpComponent,\n    },\n    {\n        path: 'plans',\n        component: PlansComponent,\n    },\n    {\n        path: 'card-details',\n        component: CardDetailsComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class AuthenticationRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ResetComponent } from './reset/reset.component';\nimport { TwitterComponent } from './twitter/twitter.component';\nimport { EmailComponent } from './email/email.component';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { OtpComponent } from './otp/otp.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { HttpClient } from \"@angular/common/http\";\nimport { TranslateHttpLoader } from \"@ngx-translate/http-loader\";\nimport { TranslateLoader, TranslateModule } from \"@ngx-translate/core\";\nimport { PlansComponent } from './plans/plans.component';\nimport { CardDetailsComponent } from './card-details/card-details.component';\n\nexport function createTranslateLoader(http: HttpClient) {\n    return new TranslateHttpLoader(http, \"./assets/i18n/\", \".json\");\n}\n\n@NgModule({\n    declarations: [\n        ResetComponent,\n        TwitterComponent,\n        EmailComponent,\n        LoginComponent,\n        SignupComponent,\n        ForgotComponent,\n        OtpComponent,\n        PlansComponent,\n        CardDetailsComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AuthenticationRoutingModule,\n        SharedModule,\n        TranslateModule.forChild({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: createTranslateLoader,\n                deps: [HttpClient],\n            },\n        }),\n    ],\n})\nexport class AuthenticationModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { PlanService } from 'src/app/services/plan.service';\nimport { NotifyService } from 'src/app/services/notify.service';\nimport { Router } from '@angular/router';\nimport { HelperService } from 'src/app/services/helper.service';\n\n@Component({\n\tselector: 'app-card-details',\n\ttemplateUrl: './card-details.component.html',\n\tstyleUrls: ['./card-details.component.less']\n})\nexport class CardDetailsComponent implements OnInit {\n\n\tvalidateForm!: FormGroup;\n\tminyear = new Date().getFullYear();\n    maxyear = new Date().getFullYear() + 20;\n\tsubmitForm(): void {\n\t\tfor (const i in this.validateForm.controls) {\n\t\t\tthis.validateForm.controls[i].markAsDirty();\n\t\t\tthis.validateForm.controls[i].updateValueAndValidity();\n\t\t}\n\t\tif(this.validateForm.valid){\n\t\t\tlet val = {\n\t\t\t\tid:localStorage.getItem('planid'),\n\t\t\t\t// email:this.validateForm.value.email,\n\t\t\t\tnumber:this.validateForm.value.cardnumber,\n\t\t\t\tmonth:this.validateForm.value.month,\n\t\t\t\tcvc:this.validateForm.value.cvc,\n\t\t\t\tyear:this.validateForm.value.year,\n\t\t\t\tstreet:this.validateForm.value.street,\n\t\t\t\tcity:this.validateForm.value.city,\n\t\t\t\tstate:this.validateForm.value.state,\n\t\t\t\tpincode:this.validateForm.value.pincode,\n\t\t\t\tcountry:this.validateForm.value.country\n\t\t\t}\n\t\t\tthis.planService.subPlan(val).subscribe((res)=>{\n\t\t\t\tif(res['success']){\n\t\t\t\t  this.notify.success(res['message']);\n\t\t\t\t  this.router.navigate(['/home']);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t  this.notify.success(res['message'])\n\t\t\t\t}\n\t\t\t  },\n\t\t\t  (err)=>{\n\t\t\t\tthis.notify.error(err.error['message']);\n\t\t\t  })\n\t\t}\n\t}\n\n\tamount = localStorage.getItem('amount');\n\tplanmonth = localStorage.getItem('month')\n\n\tconstructor(private helper:HelperService,private fb: FormBuilder,private router: Router,private planService:PlanService,private notify:NotifyService) { }\n\n\tngOnInit(): void {\n\t\t\n\t\tthis.validateForm = this.fb.group({\n\t\t\t// agree: [null, [Validators.required]],\n\t\t\tcardnumber: [null, [Validators.required, Validators.maxLength(16)]],\n            month: [null, [Validators.required, Validators.max(12), Validators.min(1)]],\n            cvc: [null, [Validators.required, Validators.minLength(3), Validators.maxLength(4)]],\n            year: [null, [Validators.required, Validators.min(this.minyear), Validators.max(this.maxyear)]],\n            street: [null, [Validators.required]],\n            email: [null, [Validators.required, Validators.email]],\n            city: [null, [Validators.required]],\n            state: [null, [Validators.required]],\n            pincode: [null, [Validators.required]],\n            country: [null, [Validators.required]],\n\t\t});\n\t}\n\n\tlogOut(){\n\t\tthis.helper.LogOut();\n\t}\n}\n","<div class=\"auth-section\">\n    <div class=\"auth-form signup-form\">\n        <!-- <div class=\"auth-logo\"></div> -->\n        <div class=\"d-flex align-items-center justify-content-between mb-4 pb-2\">\n            <div>\n                <img src=\"assets/img/logo.svg\" alt=\"doodem\" draggable=\"false\" width=\"120\" height=\"42\">\n            </div>\n            <div class=\"flex-center font-weight-bold logout-text\">\n                <a (click)=\"logOut()\">{{\"Logout\" | translate}}</a>\n            </div>\n        </div>\n        <h4 class=\"text-center font-weight-bold mb-4 pb-2\">\n            {{\"setupPayment\" | translate}}\n        </h4>\n        <form nz-form [formGroup]=\"validateForm\" class=\"login-form\" (ngSubmit)=\"submitForm()\">\n            <div nz-row [nzGutter]=\"24\" nzAlign=\"top\">\n                <div nz-col nzXs=\"24\" nzSm=\"24\" nzMd=\"12\" nzLg=\"12\" nzXl=\"12\">\n                    <div class=\"addcardform-row\">\n                        <nz-form-item>\n                            <nz-form-label nzFor=\"email\">{{\"Email\" | translate}}</nz-form-label>\n                            <nz-form-control [nzErrorTip]=\"EmailErrorTpl\">\n                                <input nz-input name=\"email\" id=\"email\" type=\"email\" formControlName=\"email\">\n                                <ng-template #EmailErrorTpl let-control>\n                                    <ng-container *ngIf=\"control.hasError('required')\">\n                                        {{\"EnterEmail\" | translate}}\n                                    </ng-container>\n                                </ng-template>\n                            </nz-form-control>\n                        </nz-form-item>\n                    </div>\n                    <div class=\"addcardform-row\">\n                        <nz-form-item>\n                            <nz-form-label nzFor=\"cardnumber\">{{\"CardNo\" | translate}}</nz-form-label>\n                            <nz-form-control [nzErrorTip]=\"CardErrorTpl\">\n                                <input nz-input name=\"cardnumber\" type=\"number\" pattern=\"\\d*\"\n                                    formControlName=\"cardnumber\">\n                                <ng-template #CardErrorTpl let-control>\n                                    <ng-container *ngIf=\"control.hasError('required')\">\n                                        {{\"EnterCardNo\" | translate}}\n                                    </ng-container>\n                                    <ng-container *ngIf=\"control.hasError('maxlength')\">\n                                        {{\"CardPattern\" | translate}}\n                                    </ng-container>\n                                </ng-template>\n                            </nz-form-control>\n                        </nz-form-item>\n                    </div>\n                    <div class=\"addcardform-row\">\n                        <nz-form-item>\n                            <nz-form-label nzFor=\"month\">{{\"ExpiryMonth\" | translate}}</nz-form-label>\n                            <nz-form-control [nzErrorTip]=\"MonthErrorTpl\">\n                                <input nz-input name=\"month\" id=\"month\" type=\"number\" formControlName=\"month\">\n                                <ng-template #MonthErrorTpl let-control>\n                                    <ng-container *ngIf=\"control.hasError('required')\">\n                                        {{\"EnterExpiryMonth\" | translate}}\n                                    </ng-container>\n                                    <ng-container *ngIf=\"control.hasError('max') || control.hasError('min')\">\n                                        {{\"EnterExpiryMonth\" | translate}}\n                                    </ng-container>\n                                </ng-template>\n                            </nz-form-control>\n                        </nz-form-item>\n                        <nz-form-item>\n                            <nz-form-label nzFor=\"year\">{{\"ExpiryYear\" | translate}}</nz-form-label>\n                            <nz-form-control [nzErrorTip]=\"YearErrorTpl\">\n                                <input nz-input name=\"year\" id=\"year\" type=\"number\" formControlName=\"year\">\n                                <ng-template #YearErrorTpl let-control>\n                                    <ng-container *ngIf=\"control.hasError('required') || control.hasError('maxlength')\">\n                                        {{\"EnterExpiryYear\" | translate}}\n                                    </ng-container>\n                                </ng-template>\n                            </nz-form-control>\n                        </nz-form-item>\n                        <nz-form-item>\n                            <nz-form-label nzFor=\"cvc\">{{\"CVV\" | translate}}</nz-form-label>\n                            <nz-form-control [nzErrorTip]=\"CvcErrorTpl\">\n                                <input nz-input name=\"cvc\" id=\"cvc\" type=\"password\" pattern=\"\\d*\" formControlName=\"cvc\">\n                                <ng-template #CvcErrorTpl let-control>\n                                    <ng-container *ngIf=\"control.hasError('required')\">\n                                        {{\"EnterCVV\" | translate}}\n                                    </ng-container>\n                                    <ng-container *ngIf=\"control.hasError('minlength')\">\n                                        {{\"MinCVV\" | translate}}\n                                    </ng-container>\n                                    <ng-container *ngIf=\"control.hasError('maxlength')\">\n                                        {{\"MaxCVV\" | translate}}\n                                    </ng-container>\n                                </ng-template>\n                            </nz-form-control>\n                        </nz-form-item>\n                    </div>\n                </div>\n                <div nz-col nzXs=\"24\" nzSm=\"24\" nzMd=\"12\" nzLg=\"12\" nzXl=\"12\">\n                    <div class=\"addcardform-row\">\n                        <nz-form-item>\n                            <nz-form-label nzFor=\"userName\">{{\"Street\" | translate}}</nz-form-label>\n                            <nz-form-control [nzErrorTip]=\"StreetErrorTpl\">\n                                <input nz-input name=\"street\" id=\"street\" type=\"text\" formControlName=\"street\">\n                                <ng-template #StreetErrorTpl let-control>\n                                    <ng-container *ngIf=\"control.hasError('required')\">\n                                        {{\"EnterStreet\" | translate}}\n                                    </ng-container>\n                                </ng-template>\n                            </nz-form-control>\n                        </nz-form-item>\n                        <nz-form-item>\n                            <nz-form-label nzFor=\"city\">{{\"City\" | translate}}</nz-form-label>\n                            <nz-form-control [nzErrorTip]=\"CityErrorTpl\">\n                                <input nz-input name=\"city\" id=\"city\" type=\"text\" formControlName=\"city\">\n                                <ng-template #CityErrorTpl let-control>\n                                    <ng-container *ngIf=\"control.hasError('required')\">\n                                        {{\"EnterCity\" | translate}}\n                                    </ng-container>\n                                </ng-template>\n                            </nz-form-control>\n                        </nz-form-item>\n                    </div>\n                    <div class=\"addcardform-row\">\n                        <nz-form-item>\n                            <nz-form-label nzFor=\"state\">{{\"State\" | translate}}</nz-form-label>\n                            <nz-form-control [nzErrorTip]=\"StateErrorTpl\">\n                                <input nz-input name=\"state\" id=\"state\" type=\"text\" formControlName=\"state\">\n                                <ng-template #StateErrorTpl let-control>\n                                    <ng-container *ngIf=\"control.hasError('required')\">\n                                        {{\"EnterState\" | translate}}\n                                    </ng-container>\n                                </ng-template>\n                            </nz-form-control>\n                        </nz-form-item>\n                        <nz-form-item>\n                            <nz-form-label nzFor=\"pincode\">{{\"Postal\" | translate}}</nz-form-label>\n                            <nz-form-control [nzErrorTip]=\"ZipcodeErrorTpl\">\n                                <input nz-input name=\"pincode\" id=\"pincode\" type=\"text\" formControlName=\"pincode\">\n                                <ng-template #ZipcodeErrorTpl let-control>\n                                    <ng-container *ngIf=\"control.hasError('required')\">\n                                        {{\"EnterPostal\" | translate}}\n                                    </ng-container>\n                                </ng-template>\n                            </nz-form-control>\n                        </nz-form-item>\n                    </div>\n                    <div class=\"addcardform-row\">\n                        <nz-form-item>\n                            <nz-form-label nzFor=\"country\">{{\"Country\" | translate}}</nz-form-label>\n                            <nz-form-control [nzErrorTip]=\"CountryErrorTpl\">\n                                <input nz-input name=\"country\" id=\"country\" type=\"text\" formControlName=\"country\">\n                                <ng-template #CountryErrorTpl let-control>\n                                    <ng-container *ngIf=\"control.hasError('required')\">\n                                        {{\"EnterCountry\" | translate}}\n                                    </ng-container>\n                                </ng-template>\n                            </nz-form-control>\n                        </nz-form-item>\n                    </div>\n                </div>\n            </div>\n            <div class=\"change-plan-card\">\n                <div>\n                    <span class=\"d-block font-weight-bold\">€ {{amount}}/{{planmonth}} {{\"Month\" | translate}}.</span>\n                    <span class=\"d-block\">{{\"Free\" | translate}}</span>\n                </div>\n                <a [routerLink]=\"['/auth/plans']\">{{\"ChangePlan\" | translate}}</a>\n            </div>\n            <button nz-button [nzType]=\"'primary'\" nzBlock>{{\"StartMembership\" | translate}}</button>\n        </form>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../../services/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NzMessageService } from 'ng-zorro-antd/message';\n\n@Component({\n    selector: 'app-email',\n    templateUrl: './email.component.html',\n    styleUrls: ['./email.component.less'],\n})\nexport class EmailComponent implements OnInit {\n    verifyToken;\n\n    constructor(\n        private authService: AuthService,\n        private message: NzMessageService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {}\n\n    ngOnInit(): void {\n        localStorage.setItem('token', this.route.snapshot.paramMap.get('id'));\n        this.EmailVerify();\n    }\n\n    EmailVerify() {\n        this.authService.VerifyEmail().subscribe((res) => {\n            if (res['success']) {\n                this.message.success(res['message']);\n                localStorage.clear();\n                this.router.navigate(['/auth/login']);\n            } else {\n                this.message.error(res['message']);\n            }\n        });\n    }\n}\n","<div class=\"auth-section\">\n    <div class=\"text-center mt-4\">\n        <img src=\"assets/img/logo.svg\" alt=\"doodem\" width=\"110px\" draggable=\"false\" class=\"logo-image\">\n    </div>\n    <div class=\"auth-card-warpper\">\n        <div class=\"auth-card\">\n            <div class=\"auth-header\">\n                <img src=\"assets/img/auth/email.svg\" alt=\"email\" width=\"80px\" draggable=\"false\" class=\"logo-image\">\n                <h5 class=\"font-weight-bold\">Email Verified Successfully!</h5>\n                <p class=\"text-muted mb-0\">Your email address has been successfully verified successfully.</p>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { NotifyService } from 'src/app/services/notify.service';\nimport { Router } from '@angular/router';\nimport { PrintScreens } from 'src/app/helpers/printScreen';\nimport { HomeService } from 'src/app/services/home.service';\n\n@Component({\n    selector: 'app-forgot',\n    templateUrl: './forgot.component.html',\n    styleUrls: ['./forgot.component.less'],\n})\nexport class ForgotComponent implements OnInit {\n    passwordForm: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        private authService: AuthService,\n        private notify: NotifyService,\n        private router: Router,\n        private homeservice:HomeService\n    ) {}\n\n    ngOnInit(): void {\n        let printSrc = new PrintScreens;\n        printSrc.PrintScr();\n        this.getSettings();\n    }\n\n    Forgot() {\n        if(this.passwordForm.value.email == null){\n            this.notify.error('Enter your Email Address');\n        }\n       else if (this.passwordForm.valid) {\n            this.authService.ForgotPassword(this.passwordForm.value).subscribe(\n                (data) => {\n                    this.notify.success(data['message']);\n                    this.router.navigate(['/auth/login']);\n                 },\n                (err) => {\n                    this.notify.error(err.error['message']);\n                }\n            );\n        }\n    }\n\n    ispageLoad = false;\n    settingData;\n    getSettings(){\n        this.ispageLoad = true;\n          this.homeservice.getTerms().subscribe((res)=>{\n              if(res['success']){\n                  this.settingData = res['data'];\n                  if(this.settingData?.user_site_maintainence == true){\n                      this.router.navigate(['/sitemaintain']);\n                      this.ispageLoad = false;\n                  }\n                  else{\n                      this.ispageLoad = false;\n                      this.passwordForm = this.fb.group({\n                        email: [null, [Validators.email, Validators.required]],\n                    });\n              }\n              }\n              // console.log(res['data'],'terms')\n            \n            });\n        \n      }\n      \n}\n","<div *ngIf=\"ispageLoad\" class=\"text-center\">\n    <i nz-icon [nzType]=\"'loading'\" *ngIf=\"ispageLoad\" [nzSpin]=\"true\"></i>\n</div>\n<div class=\"auth-section\" *ngIf=\"!ispageLoad\">\n    <div class=\"auth-form\">\n        <div class=\"auth-logo\"></div>\n        <h5 class=\"text-center mb-1\">{{\"ForgotPasswordTitle\" | translate}}</h5>\n        <p class=\"title-text\">\n            {{\"ForgotPasswordDesc\" | translate}}\n        </p>\n        <form nz-form [formGroup]=\"passwordForm\" (ngSubmit)=\"Forgot()\">\n            <nz-form-item>\n                <nz-form-label nzFor=\"email\">{{\"EmailId\" | translate}}</nz-form-label>\n                <nz-form-control [nzErrorTip]=\"emailErrorTpl\">\n                    <input type=\"email\" name=\"email\" id=\"email\" nz-input formControlName=\"email\" required />\n                    <ng-template #emailErrorTpl let-control>\n                        <ng-container *ngIf=\"control.hasError('email')\">\n                            {{\"EmailPattern\" | translate}}\n                        </ng-container>\n                        <ng-container *ngIf=\"control.hasError('required')\">\n                            {{\"EnterEmail\" | translate}}\n                        </ng-container>\n                    </ng-template>\n                </nz-form-control>\n            </nz-form-item>\n            <button nz-button class=\"auth-form-button auth-form-margin\" [nzType]=\"'primary'\">\n                {{\"ResetLink\" | translate}}\n            </button>\n        </form>\n        <div class=\"text-center mt-2\">\n            <a routerLink=\"/auth/login\">{{\"BackLogin\" | translate}}</a>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { NotifyService } from 'src/app/services/notify.service';\nimport { HelperService } from 'src/app/services/helper.service';\nimport { Router } from '@angular/router';\nimport { PrintScreens } from 'src/app/helpers/printScreen';\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { validLanguage } from \"src/app/helpers/languages\";\nimport { HomeService } from 'src/app/services/home.service';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.less'],\n})\nexport class LoginComponent implements OnInit {\n    passwordVisible = false;\n    password?: string;\n    loginForm: FormGroup;\n    isLoading = false;\n    constructor(\n        private translate: TranslateService,\n        private fb: FormBuilder,\n        private authService: AuthService,\n        private notify: NotifyService,\n        private helper: HelperService,\n        private router: Router,\n        private homeservice:HomeService\n    ) {}\n\n    ngOnInit(): void {\n        let printSrc = new PrintScreens;\n        printSrc.PrintScr();\n      this.getSettings();\n    }\n\n    Login() {\n        if(this.loginForm.value.email == null || this.loginForm.value.password == null){\n            this.notify.error('Enter your credentials');\n        }\n       else if (this.loginForm.valid) {\n        this.isLoading = true;\n        let val = {\n            email:this.loginForm.value.email.toLowerCase(),\n            password:this.loginForm.value.password\n        }\n             this.authService.Login(val).subscribe(\n                (data) => {\n                    if (data['g2fa']) {\n                        this.authService.g2fEmail = this.loginForm.value.email;\n                        return this.router.navigate(['/auth/otp']);\n                    }\n                    this.notify.success(data['message']);\n                    this.isLoading = false;\n                    this.helper.Login(data);\n                    localStorage.setItem('locale',data['user']['language'])\n                    this.translate.use(validLanguage(data['user']['language']));\n                     document.documentElement.lang = data['user']['language'];\n                },\n                (err) => {\n                    this.isLoading = false;\n                    this.notify.error(err.error.message);\n                    localStorage.clear();\n                }\n            );\n        }\n    }\n\n    TwitterLogin() {\n        this.authService.TwitterLogin();\n    }\n\n    ispageLoad = false;\n    settingData;\n    getSettings(){\n        this.ispageLoad = true;\n          this.homeservice.getTerms().subscribe((res)=>{\n              if(res['success']){\n                  this.settingData = res['data'];\n                  if(this.settingData?.user_site_maintainence == true){\n                      this.router.navigate(['/sitemaintain']);\n                      this.ispageLoad = false;\n                  }\n                  else{\n                      this.ispageLoad = false;\n                      this.helper.isAlreadyLoggedIn();\n                      this.loginForm = this.fb.group({\n                          email: [null, [Validators.email, Validators.required]],\n                          password: [null, [Validators.required]],\n                          remember: [false],\n                      });\n                  }\n              }\n              // console.log(res['data'],'terms')\n            \n            });\n        \n      }\n      \n}\n","<div *ngIf=\"ispageLoad\" class=\"text-center\">\n    <i nz-icon [nzType]=\"'loading'\" *ngIf=\"ispageLoad\" [nzSpin]=\"true\"></i>\n</div>\n<div class=\"auth-section\" *ngIf=\"!ispageLoad\">\n    <div class=\"auth-form\">\n        <div class=\"auth-logo\"></div>\n        <form nz-form [formGroup]=\"loginForm\" (ngSubmit)=\"Login()\">\n            <nz-form-item>\n                <nz-form-label nzFor=\"email\">{{\"EmailId\" | translate}}</nz-form-label>\n                <nz-form-control nzErrorTip=\"{{'EnterEmail' | translate}}\">\n                    <input type=\"email\" name=\"email\" id=\"email\" nz-input formControlName=\"email\" required />\n                </nz-form-control>\n            </nz-form-item>\n            <nz-form-item>\n                <nz-form-label nzFor=\"password\">{{\"Password\" | translate}}</nz-form-label>\n                <nz-form-control nzErrorTip=\"{{'EnterPassword' | translate}}\">\n                    <nz-input-group [nzSuffix]=\"suffixTemplate\">\n                        <input [type]=\"passwordVisible ? 'text' : 'password'\" name=\"password\" id=\"password\"\n                            formControlName=\"password\" nz-input [(ngModel)]=\"password\" />\n                    </nz-input-group>\n                    <ng-template #suffixTemplate>\n                        <i nz-icon [nzType]=\"passwordVisible ? 'eye' : 'eye-invisible'\"\n                            (click)=\"passwordVisible = !passwordVisible\"></i>\n                    </ng-template>\n                </nz-form-control>\n            </nz-form-item>\n            <nz-form-item class=\"mb-3 d-flex align-items-center justify-content-between\">\n                <label nz-checkbox formControlName=\"remember\">\n                    <span>{{\"Remember\" | translate}}</span>\n                </label>\n                <a routerLink=\"/auth/forgot\" class=\"float-right\">{{\"ForgotPasswordLink\" | translate}}</a>\n            </nz-form-item>\n            <button nz-button class=\"auth-form-button auth-form-margin\" [nzLoading]=\"isLoading\" [nzType]=\"'primary'\">\n                {{\"Login\" | translate}}\n            </button>\n        </form>\n        <div class=\"or-login\">\n            <span>OR</span>\n        </div>\n        <a nz-button nzType=\"default\" (click)=\"TwitterLogin()\" class=\"login-twitter\"><span\n                class=\"twitter-icon\"></span>{{\"LoginTwitter\" | translate}}\n        </a>\n        <div class=\"text-center mt-4\">\n            {{\"HaveAccount\" | translate}} <a routerLink=\"/auth/signup\">{{\"Register\" | translate}}</a>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\nimport { OtpValidator } from 'src/app/helpers/customValidators';\nimport { HelperService } from 'src/app/services/helper.service';\nimport { NotifyService } from 'src/app/services/notify.service';\nimport { PrintScreens } from 'src/app/helpers/printScreen';\n@Component({\n    selector: 'app-otp',\n    templateUrl: './otp.component.html',\n    styleUrls: ['./otp.component.less'],\n})\nexport class OtpComponent implements OnInit {\n    g2fForm: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        private authService: AuthService,\n        private router: Router,\n        private helper: HelperService,\n        private notify: NotifyService\n    ) {}\n\n    ngOnInit(): void {\n        let printSrc = new PrintScreens;\n        printSrc.PrintScr();\n        if (this.authService.g2fEmail == '')\n            this.router.navigate(['/auth/login']);\n\n        this.g2fForm = this.fb.group({\n            otp: [null, [Validators.required, OtpValidator]],\n        });\n    }\n\n    Login() {\n        if (this.g2fForm.valid) {\n            this.authService\n                .G2FLogin({\n                    email: this.authService.g2fEmail,\n                    otp: this.g2fForm.value.otp,\n                })\n                .subscribe(\n                    (data) => {\n                        this.notify.success(data['message']);\n                        this.helper.Login(data);\n                    },\n                    (err) => {\n                        this.notify.error(err.error['message']);\n                    }\n                );\n        }\n    }\n}\n","<div class=\"auth-section\">\n    <div class=\"auth-form\">\n        <div class=\"auth-logo\"></div>\n        <form nz-form [formGroup]=\"g2fForm\" (ngSubmit)=\"Login()\">\n            <nz-form-item>\n                <nz-form-label nzFor=\"twofactor\"\n                    >{{\"2FactorAuth\" | translate}}</nz-form-label\n                >\n                <nz-form-control [nzErrorTip]=\"otpErrorTpl\">\n                    <input\n                        type=\"number\"\n                        id=\"twofactor\"\n                        nz-input\n                        formControlName=\"otp\"\n                        required\n                    />\n\n                    <ng-template #otpErrorTpl let-control>\n                        <ng-container *ngIf=\"control.hasError('pattern')\">\n                            {{\"ValidOTP\" | translate}}\n                        </ng-container>\n                        <ng-container *ngIf=\"control.hasError('required')\">\n                           {{\"EnterOTP\" | translate}}\n                        </ng-container>\n                    </ng-template>\n                </nz-form-control>\n            </nz-form-item>\n            <button\n                nz-button\n                class=\"auth-form-button auth-form-margin\"\n                [nzType]=\"'primary'\"\n            >\n                {{\"Submit\" | translate}}\n            </button>\n        </form>\n        <div class=\"text-center mt-2\">\n            <a routerLink=\"/auth/login\">{{\"BackLogin\" | translate}}</a>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { PlanService } from 'src/app/services/plan.service';\nimport { WalletService } from 'src/app/services/wallet.service';\nimport { NotifyService } from 'src/app/services/notify.service';\nimport { ProfileService } from 'src/app/services/profile.service';\nimport { Router } from '@angular/router';\nimport { HelperService } from 'src/app/services/helper.service';\nimport { HomeService } from 'src/app/services/home.service';\n\n@Component({\n  selector: 'app-plans',\n  templateUrl: './plans.component.html',\n  styleUrls: ['./plans.component.less']\n})\nexport class PlansComponent implements OnInit {\n\n  PlanDetail = [];\n\n  walletBalance = 0;\n  amount = 0;\n  addAmount = 0;\n  depositamount = 0;\n  min = 1;\n  depamount = 0;\n  listOfCard = [];\n  getPaymentDetails: any;\n  cardnotfound = false;\n\n  // Deposit Value\n  depositValue = 'Wallet';\n\n  // Radio -- Select Coin\n  selectCoin = 'btc';\n\n  // Radio -- Select Card\n  selectCard = 'kotak';\n\n  // Modal -- Deposit -- order\n  deposit = 'paytype';\n\n  profile\n\n  planId;\n  // Modal --  Deposit\n  isVisibleDeposit = false;\n  showModalDeposit(amount, offer, obj): void {\n    this.amount = amount - ((amount * offer) / 100);\n    this.planId = obj._id;\n    let amounts:any;\n    amounts = this.amount;\n    localStorage.setItem('planid',this.planId);\n    localStorage.setItem('month',obj.validity);\n    localStorage.setItem('amount',amounts)\n    if (this.amount == 0) {\n      let val = {\n        id:this.planId\n      }\n      this.planService.subPlan(val).subscribe((res)=>{\n        if(res['success']){\n          this.notify.success(res['message']);\n          this.router.navigate(['/home']);\n        }\n        else{\n          this.notify.success(res['message'])\n        }\n      },\n      (err)=>{\n        this.notify.error(err.error['message']);\n      })\n    }\n    else {\n      this.isVisibleDeposit = true;\n    }\n  }\n\n  handleCancelDeposit(): void {\n    this.isVisibleDeposit = false;\n    this.amount = 0;\n  }\n\n  closeDeposit() {\n    this.isVisibleDeposit = false;\n    this.amount = 0;\n  }\n\n  constructor(private helper:HelperService,private profileService: ProfileService, private router: Router,\n    private walletservice: WalletService, private planService: PlanService, private notify: NotifyService,private homeservice:HomeService) { }\n\n  ngOnInit(): void {\n    this.getSettings();\n    \n  }\n\n  getPlan() {\n    this.planService.GetAppplan().subscribe((res) => {\n      if (res['success']) {\n        this.PlanDetail = res['data'];\n        this.PlanDetail.sort(function (a, b) {\n          return a.price - b.price;\n        });\n      }\n    })\n  }\n\n  depositMethod(method): void {\n     if (method == 'card') {\n      this.deposit = method;\n      this.GetCardList();\n    }\n    else {\n      let val = {\n        id: this.planId,\n        wallet: true\n      }\n      this.planService.subPlan(val).subscribe((res)=>{\n        if(res['success']){\n          this.notify.success(res['message']);\n          this.router.navigate(['/home']);\n        }\n        else{\n          this.notify.success(res['message'])\n        }\n      },\n      (err)=>{\n        this.notify.error(err.error['message']);\n      })\n      this.isVisibleDeposit = false;\n    }\n  }\n\n  pay(c_id){\n    let val = {\n      id: this.planId,\n      card_id:c_id\n    }\n    this.planService.subPlan(val).subscribe((res)=>{\n      if(res['success']){\n        this.notify.success(res['message']);\n        this.isVisibleDeposit = false;\n           this.router.navigate(['/home']);\n      }\n      else{\n        this.notify.success(res['message'])\n      }\n    },\n    (err)=>{\n      this.notify.error(err.error['message']);\n    })\n  }\n\n  GetProfile() {\n    this.profileService.GetProfile().subscribe((data) => {\n      if (data && data['success']) {\n        this.profile = data['data'];\n        this.walletBalance = this.profile['balance']\n      }\n    })\n  }\n  GetCardList() {\n    this.walletservice.GetCardList().subscribe((data) => {\n      if (data['success']) {\n        this.listOfCard = data['data'];\n        if (data['data'].length == 0) {\n          this.cardnotfound = true;\n        }\n      }\n    },\n      (err) => {\n        this.notify.error(err.error.message);\n      }\n    );\n  }\n  logOut(){\n\t\tthis.helper.LogOut();\n  }\n  \n  ispageLoad = false;\n    settingData;\n    getSettings(){\n        this.ispageLoad = true;\n          this.homeservice.getTerms().subscribe((res)=>{\n              if(res['success']){\n                  this.settingData = res['data'];\n                  if(this.settingData?.user_site_maintainence == true){\n                      this.router.navigate(['/sitemaintain']);\n                      this.ispageLoad = false;\n                  }\n                  else{\n                      this.ispageLoad = false;\n                      this.GetProfile();\n    this.getPlan();\n                 \n              }\n              }\n              // console.log(res['data'],'terms')\n            \n            });\n        \n      }\n      \n}\n","<div *ngIf=\"ispageLoad\" class=\"text-center\">\n    <i nz-icon [nzType]=\"'loading'\" *ngIf=\"ispageLoad\" [nzSpin]=\"true\"></i>\n</div>\n<div class=\"auth-section\" *ngIf=\"!ispageLoad\">\n    <div class=\"auth-form plan-form\">\n        <div class=\"d-flex align-items-center justify-content-between mb-5\">\n            <div>\n                <img src=\"assets/img/logo.svg\" alt=\"doodem\" draggable=\"false\" width=\"120\" height=\"42\">\n            </div>\n            <div class=\"flex-center font-weight-bold logout-text\">\n                <a (click)=\"logOut()\">{{\"LogOut\" | translate}}</a>\n            </div>\n        </div>\n        <h4 class=\"text-center font-weight-bold mb-3\">{{\"PriceSection\" | translate}}</h4>\n        <h6 class=\"text-center\">\n            {{\"LaunchOffer\" | translate}}\n        </h6>\n        <p>{{\"LaunchOfferDesc\" | translate}}\n        </p>\n        <div class=\"my-4 py-sm-1\">\n            <h4 class=\"text-center font-weight-bold mb-3\">{{\"PremiumFeature\" | translate}}</h4>\n            <div nz-row [nzGutter]=\"24\">\n                <div nz-col nzXs=\"24\" nzSm=\"24\" nzMd=\"24\" nzLg=\"8\" nzXl=\"8\">\n                    <ul class=\"feature-lists\">\n                        <li>\n                            <i-feather name=\"credit-card\"></i-feather>\n                            <span>{{\"unlimitedEarning\" | translate}}</span>\n                        </li>\n                        <li>\n                            <i-feather name=\"share-2\"></i-feather>\n                            <span>{{\"Privatecontent\" | translate}}</span>\n                        </li>\n                    </ul>\n                </div>\n                <div nz-col nzXs=\"24\" nzSm=\"24\" nzMd=\"24\" nzLg=\"8\" nzXl=\"8\">\n                    <ul class=\"feature-lists\">\n                        <li>\n                            <i-feather name=\"layout\"></i-feather>\n                            <span>{{\"FlexiblePayouts\" | translate}}</span>\n                        </li>\n                        <li>\n                            <i-feather name=\"message-square\"></i-feather>\n                            <span>{{\"PvtMessage\" | translate}}</span>\n                        </li>\n                    </ul>\n                </div>\n                <div nz-col nzXs=\"24\" nzSm=\"24\" nzMd=\"24\" nzLg=\"8\" nzXl=\"8\">\n                    <ul class=\"feature-lists\">\n                        <li>\n                            <i-feather name=\"video\"></i-feather>\n                            <span>{{\"OneOnChatting\" | translate}}</span>\n                        </li>\n                        <li>\n                            <i-feather name=\"file-text\"></i-feather>\n                            <span>{{\"Tiptocontent\" | translate}}</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <div class=\"mt-4\">\n            <!-- <h4 class=\"text-center font-weight-bold\">The Cheap And Best Pricing Around!</h4> -->\n            <h6 class=\"text-center font-weight-bold\">{{\"ChoosePlan\" | translate}}\n            </h6>\n        </div>\n        <div nz-row [nzGutter]=\"24\" class=\"align-items-center justify-content-center\">\n            <div nz-col nzXs=\"24\" nzSm=\"24\" nzMd=\"24\" nzLg=\"8\" nzXl=\"8\" *ngFor=\"let plan of PlanDetail\">\n                <div class=\"pricing-card\">\n                    <div class=\"price-icon\">\n                        <img src=\"../../../../assets/img/app/svg/shape-1.svg\" alt=\"price\" draggable=\"false\">\n                    </div>\n                    <div class=\"price-time-period\">\n                        {{plan.title | uppercase}}\n                    </div>\n                    <div class=\"price-value\">\n                        <s class=\"text-light-50\" *ngIf=\"plan.offer > 0\">€{{plan.price}}</s>\n                        €{{plan.price - (plan.price * plan.offer)/100}}\n                    </div>\n                    <div class=\"plan-validity\">\n                        € {{plan.price - (plan.price * plan.offer)/100}}/{{plan.validity}} Month\n                    </div>\n                    <div class=\"plan-action\">\n                        <a (click)=\"showModalDeposit(plan.price,plan.offer,plan)\" nz-button nzSize=\"default\"\n                            nzType=\"primary\">{{\"GetStarted\" | translate}}</a>\n                    </div>\n                </div>\n            </div>\n\n            <div nz-col nzSpan=\"24\">\n                <p class=\"small\">{{\"Note\" | translate}}: {{\"NoteDesc\" | translate}}</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Modal -- Deposit -->\n<nz-modal nzWrapClassName=\"vertical-center-modal premium-modal\" [(nzVisible)]=\"isVisibleDeposit\" [nzFooter]=\"null\"\n    nzClosable=\"false\">\n    <div *ngIf=\"deposit === 'paytype'\">\n        <div class=\"premium-modal-header\">\n            <img src=\"../../../../../assets/img/app/icon/pay-wallet.svg\" alt=\"wallet\" draggable=\"false\">\n        </div>\n        <div class=\"premium-modal-body\">\n            <!-- <h5 class=\"text-primary text-center mb-3\">{{\"AddtoWallet\" | translate}} €{{addAmount}}</h5> -->\n            <div class=\"or-login my-3\">\n                <span class=\"h6 mb-0 text-black\">{{\"PaymentMethod\" | translate}}</span>\n            </div>\n            <div class=\"deposit-category--select\">\n                <nz-radio-group [(ngModel)]=\"depositValue\">\n                    <label nz-radio nzValue=\"Wallet\" *ngIf=\"walletBalance != 0 && walletBalance >= amount\">\n                        <span class=\"radio-text\">{{\"Wallet\" | translate}}</span>\n                    </label>\n                    <label nz-radio nzValue=\"card\">\n                        <span class=\"radio-text\">{{\"Card\" |translate}}</span></label>\n                </nz-radio-group>\n            </div>\n            <div class=\"mt-2 flex-footer-btn\">\n                <button nz-button nzType=\"default\" [nzSize]=\"'large'\"\n                    (click)=\"handleCancelDeposit()\">{{\"Cancel\" | translate}}</button>\n                <button nz-button nzType=\"primary\" [nzSize]=\"'large'\"\n                    (click)=\"depositMethod(depositValue)\">{{\"Continue\" | translate}}</button>\n            </div>\n        </div>\n    </div>\n    <!-- Card Select -- Start -->\n    <div *ngIf=\"deposit === 'card'\">\n        <div class=\"custom-modal-header\">\n            <div class=\"close-btn-wrapper close-btn-left\">\n                <button nz-button class=\"modal-close-btn\" (click)=\"deposit='paytype'\">\n                    <i-feather name=\"arrow-left\"></i-feather>\n                </button>\n            </div>\n            <div class=\"text-center\">\n                <div class=\"custom-modal-title\">{{\"CardPayment\" | translate}}</div>\n            </div>\n        </div>\n        <div class=\"custom-modal-body pt-0\">\n            <div class=\"custom-input-group\" *ngIf=\"cardnotfound == true\">\n                <ng-container *ngIf=\"cardnotfound == true\">\n                    <p class=\"text-center text-md mb-0 pt-4 px-4\" *ngIf=\"listOfCard.length == 0\">\n                        <a routerLink=\"/auth/card-details\">{{\"AddCard\" | translate}}</a>\n                    </p>\n                </ng-container>\n            </div>\n            <div class=\"deposit-category--select\">\n                <nz-radio-group [(ngModel)]=\"selectCard\">\n                    <label nz-radio nzValue=\"{{card._id}}\" *ngFor=\"\n                    let card of listOfCard;\n                    let i = index\n                    \">\n                        <div class=\"card-item\">\n                            <div class=\"card-item-img\">\n                                <img src=\"../../../../../assets/img/app/icon/mastercard.svg\" alt=\"mastercard\"\n                                    draggable=\"false\">\n                            </div>\n                            <div>\n                                <div>\n                                    <!-- <span>MASTERCARD</span> -->\n                                    <span class=\"ml-2\"> *********** {{card.number}}</span>\n                                </div>\n                                <div class=\"radio-text\">{{card.brand}}</div>\n                                <div>€{{depositamount}}</div>\n                            </div>\n                        </div>\n                    </label>\n                </nz-radio-group>\n                <a routerLink=\"/auth/card-details\" *ngIf=\"listOfCard.length > 0\">{{\"chooseAnother\" | translate}}</a>\n            </div>\n            <div class=\"mt-2 flex-footer-btn\">\n                <button nz-button nzType=\"default\" [nzSize]=\"'large'\" (click)=\"handleCancelDeposit()\"\n                    *ngIf=\"cardnotfound != true\">{{\"Cancel\" | translate}}</button>\n                <button nz-button nzType=\"primary\" [nzSize]=\"'large'\" *ngIf=\"cardnotfound != true\"\n                    (click)=\"pay(selectCard)\">{{\"Done\" | translate}}</button>\n            </div>\n        </div>\n    </div>\n    <!-- Card Select -- End -->\n</nz-modal>","import { Component, OnInit } from '@angular/core';\nimport {\n    FormBuilder,\n    FormControl,\n    FormGroup,\n    Validators,\n} from '@angular/forms';\nimport { AuthService } from '../../../services/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NotifyService } from 'src/app/services/notify.service';\nimport { PrintScreens } from 'src/app/helpers/printScreen';\nimport { HomeService } from 'src/app/services/home.service';\n\n@Component({\n    selector: 'app-reset',\n    templateUrl: './reset.component.html',\n    styleUrls: ['./reset.component.less'],\n})\nexport class ResetComponent implements OnInit {\n    // Form\n    passwordForm: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        private auth: AuthService,\n        private notify: NotifyService,\n        private router: Router,\n        private route: ActivatedRoute,\n        private homeservice:HomeService\n    ) {\n        localStorage.setItem(\n            'token',\n            this.route.snapshot.paramMap.get('id')\n        );\n    }\n\n    ngOnInit(): void {\n         let printSrc = new PrintScreens;\n        printSrc.PrintScr();\n        this.getSettings();\n      \n    }\n\n    confirmValidator = (control: FormControl): { [s: string]: boolean } => {\n        if (!control.value) {\n            return { error: true, required: true };\n        } else if (\n            control.value !== this.passwordForm.controls.password.value\n        ) {\n            return { confirm: true, error: true };\n        }\n        return {};\n    };\n\n    passwordValidator = (control: FormControl): { [s: string]: boolean } => {\n        if (!control.value) {\n            return { error: true, required: true };\n        }\n        this.passwordForm.controls.confirmPassword.updateValueAndValidity();\n        return {};\n    };\n\n    Reset() {\n        if(this.passwordForm.invalid){\n            this.notify.error('Enter all values')\n        }\n         if (this.passwordForm.valid) {\n            const { password, confirmPassword } = this.passwordForm.value;\n            if (confirmPassword === password) {\n                this.auth\n                    .ResetPassword({\n                        password,\n                    })\n                    .subscribe(\n                        (res) => {\n                            if (res['success']) {\n                                localStorage.clear();\n                                this.notify.success(res['message']);\n                                this.router.navigate(['/auth/login']);\n                            } else {\n                                this.notify.error(res['message']);\n                            }\n                        },\n                        (err) => {\n                            this.notify.error(err.error['message']);\n                        }\n                    );\n            }\n        }\n    }\n    ispageLoad = false;\n    settingData;\n    getSettings(){\n        this.ispageLoad = true;\n          this.homeservice.getTerms().subscribe((res)=>{\n              if(res['success']){\n                  this.settingData = res['data'];\n                  if(this.settingData?.user_site_maintainence == true){\n                      this.router.navigate(['/sitemaintain']);\n                      this.ispageLoad = false;\n                  }\n                  else{\n                      this.ispageLoad = false;\n                      this.passwordForm = this.fb.group({\n                        password: [\n                            null,\n                            [\n                                Validators.required,\n                                Validators.pattern(\n                                    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*\\/])(?=.{8,})/\n                                ),\n                                this.passwordValidator,\n                            ],\n                        ],\n                        confirmPassword: [\n                            null,\n                            [Validators.required, this.confirmValidator],\n                        ],\n                    });\n                 \n              }\n              }\n              // console.log(res['data'],'terms')\n            \n            });\n        \n      }\n      \n}\n","<div *ngIf=\"ispageLoad\" class=\"text-center\">\n    <i nz-icon [nzType]=\"'loading'\" *ngIf=\"ispageLoad\" [nzSpin]=\"true\"></i>\n</div>\n<div class=\"auth-section\" *ngIf=\"!ispageLoad\">\n    <div class=\"auth-card-warpper\">\n        <div class=\"auth-card\">\n            <div class=\"auth-header\">\n                <img src=\"assets/img/logo.svg\" alt=\"doodem\" height=\"42\" width=\"120\" draggable=\"false\"\n                    class=\"logo-image\" />\n                <h5 class=\"font-weight-bold\">{{\"ResetPassword\" | translate}}</h5>\n            </div>\n        </div>\n        <form nz-form [formGroup]=\"passwordForm\" (ngSubmit)=\"Reset()\">\n            <nz-form-item>\n                <nz-form-label nzSpan=\"24\" nzFor=\"newPassword\">{{\"Password\" | translate}}</nz-form-label>\n                <nz-form-control [nzErrorTip]=\"combineTpl\">\n                    <input nz-input type=\"password\" id=\"newPassword\" formControlName=\"password\" placeholder=\"******\" />\n                    <ng-template #combineTpl let-control>\n                        <ng-container *ngIf=\"control.hasError('pattern')\">\n                            {{\"PasswordPattern\" | translate}}</ng-container>\n                        <ng-container *ngIf=\"control.hasError('required')\"> {{\"EnterPassword\" | translate}}\n                        </ng-container>\n                    </ng-template>\n                </nz-form-control>\n            </nz-form-item>\n            <nz-form-item>\n                <nz-form-label nzSpan=\"24\" nzFor=\"confirmNewPassword\">{{\"ConfirmPassword\" | translate}}</nz-form-label>\n                <nz-form-control [nzErrorTip]=\"errorTpl\">\n                    <input nz-input type=\"password\" placeholder=\"******\" formControlName=\"confirmPassword\"\n                        id=\"confirmNewPassword\" />\n                    <ng-template #errorTpl let-control>\n                        <ng-container *ngIf=\"control.hasError('required')\">\n                            {{\"EnterConfirmPassword\" | translate}}\n                        </ng-container>\n                        <ng-container *ngIf=\"control.hasError('confirm')\">\n                            {{\"ConfirmPassowrdMatch\" | translate}}\n                        </ng-container>\n                    </ng-template>\n                </nz-form-control>\n            </nz-form-item>\n            <nz-form-item>\n                <nz-form-control>\n                    <button nz-button class=\"login-form-button w-100 mt-2\" nzSize=\"large\" [nzType]=\"'primary'\">\n                        {{\"RePassword\" | translate}}\n                    </button>\n                </nz-form-control>\n            </nz-form-item>\n        </form>\n    </div>\n","<div *ngIf=\"ispageLoad\" class=\"text-center\">\n    <i nz-icon [nzType]=\"'loading'\" *ngIf=\"ispageLoad\" [nzSpin]=\"true\"></i>\n</div>\n<div class=\"auth-section\" *ngIf=\"!ispageLoad\">\n   \n    <div class=\"auth-form signup-form\" *ngIf=\"!isVisisble\">\n        <div class=\"auth-logo\"></div>\n        <h6 class=\"text-center mb-3\">\n            {{\"SignUpDesc\" | translate}}\n        </h6>\n        <form nz-form [formGroup]=\"signUpForm\">\n            <div nz-row [nzGutter]=\"24\" nzAlign=\"top\">\n                <div nz-col nzXs=\"24\" nzSm=\"24\" nzMd=\"12\" nzLg=\"12\" nzXl=\"12\">\n                    <nz-form-item>\n                        <nz-form-label nzFor=\"username\">{{\"Username\" | translate}}</nz-form-label>\n                        <nz-form-control [nzErrorTip]=\"nameErrorTpl\">\n                            <input type=\"text\" name=\"username\" id=\"username\"\n                                (focusout)=\"checkDuplicateData($event.target.value,'user_name')\" nz-input\n                                formControlName=\"user_name\" />\n                            <ng-container *ngIf=\"user_name_error == true\">\n                                <p style=\"color: red\">{{\"UsernameNotAvailable\" | translate}}</p>\n                            </ng-container>\n                            <ng-template #nameErrorTpl let-control>\n                                <ng-container *ngIf=\"\n                                        control.hasError('minlength') ||\n                                        control.hasError('maxlength')\n                                    \">\n                                    {{\"UsernamePattern\" | translate}}\n                                </ng-container>\n                                <ng-container *ngIf=\"control.hasError('pattern')\">\n                                    {{\"UsernamePattern\" | translate}}\n                                </ng-container>\n                                <ng-container *ngIf=\"control.hasError('required')\">\n                                    {{\"EnterUsername\" | translate}}\n                                </ng-container>\n                            </ng-template>\n                        </nz-form-control>\n                    </nz-form-item>\n                    <nz-form-item>\n                        <nz-form-label nzFor=\"email\">{{\"EmailId\" | translate}}</nz-form-label>\n                        <nz-form-control [nzErrorTip]=\"emailErrorTpl\">\n                            <input type=\"email\" name=\"email\" id=\"email\" nz-input formControlName=\"email\"\n                                [(ngModel)]=\"useremail\" />\n                            <ng-template #emailErrorTpl let-control>\n                                <ng-container *ngIf=\"control.hasError('email')\">\n                                    {{\"EmailPattern\" | translate}}\n                                </ng-container>\n                                <ng-container *ngIf=\"control.hasError('required')\">\n                                    {{\"EnterEmail\" | translate}}\n                                </ng-container>\n                            </ng-template>\n                        </nz-form-control>\n                    </nz-form-item>\n                    <nz-form-item>\n                        <nz-form-label nzFor=\"about\">{{\"Gender\" | translate}}</nz-form-label>\n                        <nz-form-control [nzErrorTip]=\"GenderErr\">\n                            <nz-select [(ngModel)]=\"Sex\" formControlName=\"Sex\" nzPlaceHolder=\"Choose\">\n                                <nz-option nzValue=\"Man\" nzLabel=\"{{'Male' | translate}}\"></nz-option>\n                                <nz-option nzValue=\"Woman\" nzLabel=\"{{'Female' | translate}}\"></nz-option>\n                                <!-- <nz-option nzValue=\"Hetro\" nzLabel=\"{{'HeteroSexual' | translate}}\"></nz-option> -->\n                                <nz-option nzValue=\"Trans\" nzLabel=\"{{'Trans' | translate}}\"></nz-option>\n                                <nz-option nzValue=\"Non-Specified\" nzLabel=\"{{'Non-Specified' | translate}}\">\n                                </nz-option>\n                            </nz-select>\n                        </nz-form-control>\n                        <ng-template #GenderErr let-control>\n                            <ng-container *ngIf=\"control.hasError('required')\">\n                                {{\"EnterGender\" | translate}}\n                            </ng-container>\n                        </ng-template>\n                    </nz-form-item>\n                    <nz-form-item>\n                        <nz-form-label nzFor=\"username\">{{\"Country\" | translate}}</nz-form-label>\n                        <nz-form-control [nzErrorTip]=\"countyErr\">\n                            <nz-select nzShowSearch nzAllowClear nzPlaceHolder=\"Country\" [(ngModel)]=\"selectedValue\"\n                                [nzShowArrow]=\"false\" formControlName=\"country\" id=\"county\">\n                                <nz-option *ngFor=\"let countr of countryCode[0]\" [nzLabel]=\"countr.name\"\n                                    [nzValue]=\"countr.name\"> </nz-option>\n                            </nz-select>\n                            <ng-template #countyErr let-control>\n                                <ng-container *ngIf=\"control.hasError('required')\">\n                                    {{\"EnterCountry\" | translate}}\n                                </ng-container>\n                            </ng-template>\n                        </nz-form-control>\n                    </nz-form-item>\n                    <nz-form-item>\n                        <nz-form-label nzFor=\"about\">{{\"Sexualorientation\" | translate}}</nz-form-label>\n                        <nz-form-control [nzErrorTip]=\"orientationErr\">\n                            <nz-select [(ngModel)]=\"Sexual_Orientation\" formControlName=\"Sexual_Orientation\"\n                                nzPlaceHolder=\"Choose\">\n                                <!-- <nz-option nzValue=\"Trans\" nzLabel=\"{{'Trans' | translate}}\"></nz-option> -->\n                                <nz-option nzValue=\"Heterosexual\" nzLabel=\"{{'HeteroSexual' | translate}}\"></nz-option>\n                                <nz-option nzValue=\"Lesbian\" nzLabel=\"{{'Lesbian' | translate}}\"></nz-option>\n                                <nz-option nzValue=\"Gay\" nzLabel=\"{{'Gay' | translate}}\"></nz-option>\n                                <nz-option nzValue=\"Bisexual\" nzLabel=\"{{'Bisexual' | translate}}\"></nz-option>\n                                <nz-option nzValue=\"All\" nzLabel=\"{{'All' | translate}}\"></nz-option>\n                                <nz-option nzValue=\"Non-Specified\" nzLabel=\"{{'Non-Specified' | translate}}\">\n                                </nz-option>\n                            </nz-select>\n                        </nz-form-control>\n                        <ng-template #orientationErr let-control>\n                            <ng-container *ngIf=\"control.hasError('required')\">\n                                {{\"EnterOrientation\" | translate}}\n                            </ng-container>\n                        </ng-template>\n                    </nz-form-item>\n                    <nz-form-item class=\"custom-mob-select\">\n                        <nz-form-label nzFor=\"mobile\">{{\"Mobile\" | translate}}</nz-form-label>\n                        <nz-form-control>\n                            <nz-input-group nzCompact class=\"d-flex mobile-input\">\n                                <div class=\"country-code\">\n                                    <img [src]=\"imageFlag\" style=\"width: 20px; height: 20px;\">\n                                    <div class=\"country-name\">{{country_name}}</div>\n                                </div>\n                                <nz-select nzShowSearch [nzDropdownMatchSelectWidth]=\"false\"\n                                    formControlName=\"country_name\" [(ngModel)]=\"country_name\"\n                                    (ngModelChange)=\"country()\">\n                                    <nz-option nzCustomContent [nzLabel]=\"data.dial_code\" [nzValue]=\"data.code\"\n                                        *ngFor=\"let data of countryCode[0]\">\n                                        <div class=\"d-flex align-items-center justify-content-between text-truncate\">\n                                            <div class=\"d-flex word-space\">\n                                                <img [src]=\"flagurl+data.code+endurl\"\n                                                    style=\"width: 20px; height: 20px;\">\n                                            </div>\n                                            <div class=\"ml-1\">{{data.dial_code}}</div>\n                                        </div>\n                                    </nz-option>\n                                </nz-select>\n                                <input class=\"pl-0 bl-0\" type=\"number\" name=\"mobile\" id=\"mobile\" nz-input\n                                    formControlName=\"mobile\" />\n                            </nz-input-group>\n                            <div *ngIf=\"signUpForm.invalid && (signUpForm.dirty || signUpForm.touched)\">\n                                <div style=\"color:red\" *ngIf=\"signUpForm.get('mobile').hasError('required')\">\n                                    {{\"EnterMobile\" | translate}}\n                                </div>\n                                <div style=\"color:red\" *ngIf=\"signUpForm.get('mobile').hasError('pattern')\">\n                                    {{\"MobilePattern\" | translate}}\n                                </div>\n                            </div>\n                        </nz-form-control>\n                    </nz-form-item>\n                </div>\n                <div nz-col nzXs=\"24\" nzSm=\"24\" nzMd=\"12\" nzLg=\"12\" nzXl=\"12\">\n                  \n                    <nz-form-item>\n                        <nz-form-label nzFor=\"language\">Language</nz-form-label>\n                        <nz-form-control [nzErrorTip]=\"langErr\">\n                            <nz-select [(ngModel)]=\"language\" (ngModelChange)=\"changeLang()\" formControlName=\"language\" nzPlaceHolder=\"Choose\"\n                                 [nzDropdownClassName]=\"'interested-item'\">\n                                <nz-option [nzValue]=\"lang.symbol\" [nzLabel]=\"lang.language\"\n                                *ngFor=\"let lang of languages\" class=\"text-capitalize\"></nz-option>\n                            </nz-select>\n                        </nz-form-control>\n                        <ng-template #langErr let-control>\n                            <ng-container *ngIf=\"control.hasError('required')\">\n                                select language\n                            </ng-container>\n                        </ng-template>\n                    </nz-form-item>\n                    <nz-form-item>\n                        <nz-form-label nzFor=\"about\">Interested In</nz-form-label>\n                        <nz-form-control [nzErrorTip]=\"categoryErr\">\n                            <nz-select [(ngModel)]=\"categoryName\" formControlName=\"category\" nzPlaceHolder=\"Choose\"\n                                (ngModelChange)=\"subcat(categoryName)\" [nzDropdownClassName]=\"'interested-item'\">\n                                <nz-option [nzValue]=\"cat._id\" [nzLabel]=\"cat.text\"\n                                    *ngFor=\"let cat of category\" class=\"text-capitalize\"></nz-option>\n                            </nz-select>\n                        </nz-form-control>\n                        <ng-template #categoryErr let-control>\n                            <ng-container *ngIf=\"control.hasError('required')\">\n                                select category\n                            </ng-container>\n                        </ng-template>\n                    </nz-form-item>\n                    <nz-form-item>\n                        <nz-form-label nzFor=\"about\">Sub Category</nz-form-label>\n                        <nz-form-control [nzErrorTip]=\"subcategoryErr\">\n                            <nz-select [(ngModel)]=\"sub_cat\" (ngModelChange)=\"getSubid(sub_cat)\" [nzDisabled]=\"category_name == 'undefined'\"\n                                formControlName=\"Subcategory\" nzPlaceHolder=\"Choose\">\n                                <nz-option [nzValue]=\"item._id\" [nzLabel]=\"item.text\" *ngFor=\"let item of subcategory\">\n                                </nz-option>\n                            </nz-select>\n                        </nz-form-control>\n                        <ng-template #subcategoryErr let-control>\n                            <ng-container *ngIf=\"control.hasError('required')\">\n                                select sub category\n                            </ng-container>\n                        </ng-template>\n                    </nz-form-item>\n                    <nz-form-item>\n                        <nz-form-label nzFor=\"password\">{{\"Password\" | translate}}</nz-form-label>\n                        <nz-form-control [nzErrorTip]=\"passwordErrorTpl\">\n                            <nz-input-group [nzSuffix]=\"suffixTemplate\">\n                                <input [type]=\"passwordVisible ? 'text' : 'password'\" name=\"password\" id=\"password\"\n                                    formControlName=\"password\" nz-input [(ngModel)]=\"password\" />\n                            </nz-input-group>\n                            <ng-template #suffixTemplate>\n                                <i nz-icon [nzType]=\"passwordVisible ? 'eye' : 'eye-invisible'\"\n                                    (click)=\"passwordVisible = !passwordVisible\"></i>\n                            </ng-template>\n                            <ng-template #passwordErrorTpl let-control>\n                                <ng-container *ngIf=\"control.hasError('pattern')\">\n                                    {{\"PasswordPattern\" | translate}}\n                                </ng-container>\n                                <ng-container *ngIf=\"control.hasError('required')\">\n                                    {{\"EnterPassword\" | translate}}\n                                </ng-container>\n                            </ng-template>\n                        </nz-form-control>\n                    </nz-form-item>\n                    <nz-form-item>\n                        <nz-form-label nzFor=\"confirmpassword\">{{\"ConfirmPassword\" | translate}}</nz-form-label>\n                        <nz-form-control [nzErrorTip]=\"cpasswordErrorTpl\">\n                            <nz-input-group [nzSuffix]=\"confirmPassword\">\n                                <input [type]=\"\n                                        confirmpasswordVisible ? 'text' : 'password'\n                                    \" name=\"password\" id=\"confirmpassword\" formControlName=\"confirmPassword\" nz-input\n                                    [(ngModel)]=\"confirmpassword\" />\n                            </nz-input-group>\n                            <ng-template #confirmPassword>\n                                <i nz-icon [nzType]=\"\n                                        confirmpasswordVisible ? 'eye' : 'eye-invisible'\n                                    \" (click)=\"\n                                        confirmpasswordVisible = !confirmpasswordVisible\n                                    \"></i>\n                            </ng-template>\n                            <ng-template #cpasswordErrorTpl let-control>\n                                <ng-container *ngIf=\"control.hasError('confirm')\">\n                                    {{\"ConfirmPassowrdMatch\" | translate}}\n                                </ng-container>\n                                <ng-container *ngIf=\"control.hasError('required')\">\n                                    {{\"EnterConfirmPassword\" | translate}}\n                                </ng-container>\n                            </ng-template>\n                        </nz-form-control>\n                    </nz-form-item>\n                </div>\n            </div>\n\n        </form>\n        <div class=\"d-flex\" >\n            <label nz-checkbox class=\"mr-2\" [formControl]=\"agree\"></label>\n            <span class=\"text-sm\">\n                <span *ngIf=\"isShow\">{{\"Agree\" | translate}}</span>\n                <span *ngIf=\"!isShow\">  {{\"AgreeCon\" | translate}}</span>\n                <a routerLink=\"/terms\" rel=\"noopener\" target=\"_blank\">{{\"Terms\" | translate}}</a>\n               {{\"and\" | translate}}\n                <a routerLink=\"/privacy\" rel=\"noopener\" target=\"_blank\">{{\"Privacy\" | translate}}</a>\n            </span>\n        </div>\n        <div *ngIf=\"(agree.hasError('required') || agree.value == false) && isShow\" style=\"color:red\">\n            {{\"AgreeTerms\" | translate}}\n        </div>\n\n        <button nz-button class=\"auth-form-button auth-form-margin\" *ngIf=\"!isShow\" [nzType]=\"'primary'\" [disabled]=\"signUpForm.invalid\" (click)=\"SignUp()\">\n            {{\"Register\" | translate}}\n        </button>\n        <button nz-button class=\"auth-form-button auth-form-margin\" *ngIf=\"isShow\" [nzType]=\"'primary'\" [disabled]=\"signUpForm.invalid && agree.value == false \" (click)=\"SignUp()\">\n            {{\"Register\" | translate}}\n        </button>\n        <div class=\"text-center mt-2\">\n            {{\"HasAccount\" | translate}} <a routerLink=\"/auth/login\">{{\"Login\" | translate}}</a>\n        </div>\n    </div>\n    <div class=\"auth-form success-auth-form\" *ngIf=\"isVisisble\">\n        <div class=\"auth-logo\"></div>\n        <div class=\"text-center success-icon\">\n            <i-feather name=\"check-circle\"></i-feather>\n        </div>\n        <h4 class=\"text-center f-w-bold mb-2\">{{\"Congrats\" | translate}}</h4>\n        <h6 class=\"email-verify-text text-center text-reset\">\n            <a href=\"https://{{domain}}\" class=\"text-reset\" target=\"_blank\">{{\"YourEmail\" | translate}}\n                <span>{{emailaddress}}</span>\n                {{\"VerifyEmail\" | translate}}</a>\n        </h6>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport {\n    FormBuilder,\n    FormGroup,\n    Validators,\n    FormControl,\n} from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { NotifyService } from 'src/app/services/notify.service';\nimport { Router } from '@angular/router';\nimport { HelperService } from 'src/app/services/helper.service';\nimport { PrintScreens } from 'src/app/helpers/printScreen';\nimport { CountryDropdown } from 'src/app/helpers/country';\nimport { ProfileService } from 'src/app/services/profile.service';\nimport { Subject, Subscription } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\nimport { validLanguage } from 'src/app/helpers/languages';\nimport { HomeService } from 'src/app/services/home.service';\n\n@Component({\n    selector: 'app-signup',\n    templateUrl: './signup.component.html',\n    styleUrls: ['./signup.component.less'],\n})\nexport class SignupComponent implements OnInit {\n    countryCode = [];\n    passwordVisible = false;\n    confirmpasswordVisible = false;\n    Sex: string;\n    Sexual_Orientation: string;\n    useremail = localStorage.getItem('user_email');\n    password?: string;\n    Email_Address;\n    confirmpassword?: string;\n    signUpForm!: FormGroup;\n    aggreed: Boolean = true;\n    user_name_error: Boolean = false;\n    isVisisble = false;\n    flagurl = 'https://www.countryflags.io/';\n    endurl = '/flat/64.png';\n    selectedValue;\n    isShow = false;\n    agree = new FormControl(null, [Validators.required]);\n\n    constructor(\n        private fb: FormBuilder,\n        private authService: AuthService,\n        private notify: NotifyService,\n        private helper: HelperService,\n        private router: Router,\n        private profile: ProfileService,\n        private translate: TranslateService,\n        private homeservice:HomeService\n    ) { }\n\n    emailaddress: any;\n    domain: any;\n    country_code;\n    country_name = 'IN';\n    imageFlag;\n    category = [];\n    subcategory = [];\n    categoryName;\n    category_name;\n    SubcategoryName;\n    sub_cat;\n    language = localStorage.getItem('locale')\n    languages = [];\n    //sign up\n    username;\n    settingData;\n\n    async ngOnInit(){\n         this.getSettings();\n    }\n\n\n    categoryList() {\n        // this.profile.GetCategory().subscribe((res) => {\n        //     this.category = res['data']\n\n        // })\n        this.lang = localStorage.getItem('locale');\n        this.profile.CategoryList(this.lang).subscribe((res) => {\n            this.category = res['data']\n        })\n    }\n\n    Cat_id;\n    lang;\n    Sub_id;\n    \n    subcat(ind) {\n        this.sub_cat = null;\n        for (let i = 0; i < this.category.length; i++) {\n            if (this.category[i]['_id'] == ind) {\n                this.Cat_id = this.category[i]['id'];\n                this.isShow = this.category[i]['adult'];\n                // this.subcategory = this.category[i]['sub_category'];\n                // this.category_name = this.category[i]['categoryname'];\n                this.subcatlist();\n            }\n        }\n    }\n\n    getSubid(ind) {\n        for (let i = 0; i < this.subcategory.length; i++) {\n            if (this.subcategory[i]['_id'] == ind) {\n                this.Sub_id = this.subcategory[i]['id'];\n                // this.isShow = this.category[i]['adult'];\n                // this.subcategory = this.category[i]['sub_category'];\n                // this.category_name = this.category[i]['categoryname'];\n                // this.subcatlist();\n              }\n        }\n    }\n\n    subcatlist() {\n        this.profile.SubCatList(this.Cat_id, this.lang).subscribe((res) => {\n            this.subcategory = res['data']\n        })\n    }\n\n    confirmValidator = (control: FormControl): { [s: string]: boolean } => {\n        if (!control.value) {\n            return { error: true, required: true };\n        } else if (control.value !== this.signUpForm.controls.password.value) {\n            return { confirm: true, error: true };\n        }\n        return {};\n    };\n\n    passwordValidator = (control: FormControl): { [s: string]: boolean } => {\n        if (!control.value) {\n            return { error: true, required: true };\n        }\n        this.signUpForm.controls.confirmPassword.updateValueAndValidity();\n        return {};\n    };\n\n    agreeValidator = (control: FormControl): { [s: string]: boolean } => {\n        if (!control.value) {\n            return { error: true, required: true };\n        }\n        this.signUpForm.controls.agree.updateValueAndValidity();\n        return {};\n    };\n\n    checkDuplicateData(value, type) {\n        this.authService.Duplicate({ value: value, type: type }).subscribe(\n            (data) => {\n                if (data['success']) {\n                    if (data['found']) {\n\n                        this.user_name_error = true;\n                    } else {\n                        this.user_name_error = false;\n                    }\n                }\n            },\n            (err) => { }\n        );\n    }\n    SignUp() {\n        for (const i in this.signUpForm.controls) {\n            this.signUpForm.controls[i].markAsDirty();\n            this.signUpForm.controls[i].updateValueAndValidity();\n        }\n        if (this.country_code == null || this.country_code == '') {\n            this.notify.error('Enter country code');\n        } else if (\n            this.signUpForm.valid &&\n            this.user_name_error != true\n\n        ) {\n            let val = {\n                user_name: this.signUpForm.value.user_name,\n                email: this.useremail.toLowerCase(),\n                mobile: this.signUpForm.value.mobile,\n                password: this.signUpForm.value.password,\n                Sex: this.signUpForm.value.Sex,\n                country: this.signUpForm.value.country,\n                Sexual_Orientation: this.signUpForm.value.Sexual_Orientation,\n                country_code: this.country_code,\n                Country_name: this.country_name,\n                subcategoryid: this.Sub_id,\n                subcategory_id: this.sub_cat,\n                category_id: this.categoryName,\n                categoryid: this.Cat_id,\n                language:this.language,\n                // categoryname: this.category_name,\n                // sub_category: this.sub_cat,\n                adult: this.isShow ? this.agree.value : false\n            };\n            this.emailaddress = this.signUpForm.value.email;\n            this.domain = this.emailaddress.substring(\n                this.signUpForm.value.email.lastIndexOf('@') + 1\n            );\n            this.authService.SignUp(val).subscribe(\n                (data) => {\n                    if (data['success']) {\n                        localStorage.clear();\n                        window.sessionStorage.clear();\n                        this.notify.success(data['message']);\n                        this.isVisisble = true;\n\n                    }\n                },\n                (err) => {\n                    // console.log(err);\n                    this.notify.error(err.error['message']);\n                }\n            );\n        }\n\n    }\n    \n    GetLanguages() {\n        this.profile.ListLanguage().subscribe((data) => {\n            if (data['success']) {\n                this.languages = data['data'];\n            }\n        });\n    }\n\n    changeLang(){\n        localStorage.setItem('locale',this.language);\n         this.translate.use(validLanguage(localStorage.getItem('locale')));\n        document.documentElement.lang = localStorage.getItem('locale');\n        this.categoryList();\n    }\n    // Clearsession() {\n    //     this.helper.LogOut();\n    //     this.router.navigate(['/product/list']);\n    // }\n\n    TwitterLogin() {\n        this.authService.TwitterLogin();\n    }\n\n    country() {\n        for (let i = 0; i < this.countryCode[0].length; i++) {\n            if (\n                this.countryCode[0][i].code ==\n                this.signUpForm.value.country_name\n            ) {\n                this.imageFlag =\n                    this.flagurl + this.countryCode[0][i].code + this.endurl;\n                this.country_name = this.countryCode[0][i].code;\n                this.country_code = this.countryCode[0][i].dial_code\n            }\n        }\n    }\n    searchTextChanged = new Subject<string>();\n\n\n    Search(val) {\n        this.searchTextChanged.next(val);\n    }\n\n    ispageLoad = false\n    userPattern = '^(?!^\\\\d+$)[A-Za-z0-9_-]{3,16}$'\n  getSettings(){\n      this.ispageLoad = true;\n        this.homeservice.getTerms().subscribe((res)=>{\n            if(res['success']){\n                this.settingData = res['data'];\n                if(this.settingData?.user_site_maintainence == true){\n                    this.router.navigate(['/sitemaintain']);\n                    this.ispageLoad = false;\n                }\n                else{\n                    this.ispageLoad = false;\n      \n                this.countryCode = CountryDropdown;\n                let printSrc = new PrintScreens();\n                printSrc.PrintScr();\n        \n                this.signUpForm = this.fb.group({\n                    user_name: [\n                        null,\n                        [\n                            Validators.required,\n                            Validators.minLength(3),\n                            Validators.maxLength(20),\n                            Validators.pattern(this.userPattern)\n                        ],\n                    ],\n                    Sex: [null, [Validators.required]],\n                    country: [null, [Validators.required]],\n                    Sexual_Orientation: [null, [Validators.required]],\n                    email: [null, [Validators.email, Validators.required]],\n                    category: [this.categoryName, [Validators.required]],\n                    Subcategory: [null, [Validators.required]],\n                    mobile: [\n                        null,\n                        [Validators.required, Validators.pattern('([0-9]{7,15})')],\n                    ],\n                    password: [\n                        null,\n                        [\n                            Validators.required,\n                            Validators.pattern(\n                                /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*\\/])(?=.{8,})/\n                            ),\n                            this.passwordValidator,\n                        ],\n                    ],\n                    confirmPassword: [\n                        null,\n                        [Validators.required, this.confirmValidator],\n                    ],\n                    //  agree: [false],\n                    country_name: [this.country_name],\n                    language: [null, [Validators.required]]\n                });\n        \n                this.GetLanguages();\n                this.country();\n                this.categoryList();\n                this.Search(this.selectedValue);\n            }\n            }\n            // console.log(res['data'],'terms')\n          \n          });\n      \n    }\n    \n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { HelperService } from 'src/app/services/helper.service';\nimport { NotifyService } from 'src/app/services/notify.service';\n\n@Component({\n    selector: 'app-twitter',\n    templateUrl: './twitter.component.html',\n    styleUrls: ['./twitter.component.less'],\n})\nexport class TwitterComponent implements OnInit {\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private authService: AuthService,\n        private helper: HelperService,\n        private notify: NotifyService\n    ) {}\n\n    ngOnInit(): void {\n        this.route.queryParams.subscribe((data) => {\n            if (data.oauth_token) {\n                this.LogIn(data.oauth_token);\n                return;\n            }\n            this.router.navigate(['/auth/login']);\n        });\n    }\n\n    LogIn(token) {\n        this.authService.TwitterLoginToken(token).subscribe(\n            (data) => {\n                this.helper.Login(data);\n            },\n            (err) => {\n                this.notify.error(err.error.message);\n            }\n        );\n    }\n}\n","<div class=\"auth-section\">\n    <div class=\"text-center mt-4\">\n        <img src=\"assets/img/logo.svg\" alt=\"doodem\" height=\"42\" width=\"120\" draggable=\"false\" class=\"logo-image\">\n    </div>\n    <div class=\"auth-card-warpper\">\n        <div class=\"auth-card\">\n            <div class=\"auth-header\">\n                <img src=\"assets/img/auth/twitter.svg\" alt=\"twitter\" width=\"80px\" draggable=\"false\" class=\"logo-image\">\n                <h5 class=\"font-weight-bold\">{{\"TwittlerSucess\" | translate}}</h5>\n                <p class=\"text-muted mb-0\">{{\"TwitterSuccessDesc\" | translate}}</p>\n            </div>\n        </div>\n    </div>\n</div>","import { FormControl } from '@angular/forms';\n\nexport const OtpValidator = (control: FormControl) => {\n    if (!control.value) {\n        return { error: true, required: true };\n    } else if (!/^\\d{6}$/.test(control.value)) {\n        return { pattern: true, error: true };\n    }\n    return {};\n};\n"]}
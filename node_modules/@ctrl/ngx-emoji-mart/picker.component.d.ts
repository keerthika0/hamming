import { ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';
import { Emoji, EmojiCategory, EmojiData, EmojiEvent } from '@ctrl/ngx-emoji-mart/ngx-emoji';
import { EmojiFrequentlyService } from './emoji-frequently.service';
import * as ɵngcc0 from '@angular/core';
export declare class PickerComponent implements OnInit {
    private ref;
    private frequently;
    perLine: number;
    totalFrequentLines: number;
    i18n: any;
    style: any;
    title: string;
    emoji: string;
    darkMode: boolean;
    color: string;
    hideObsolete: boolean;
    /** all categories shown */
    categories: EmojiCategory[];
    /** used to temporarily draw categories */
    activeCategories: EmojiCategory[];
    set: Emoji['set'];
    skin: Emoji['skin'];
    /** Renders the native unicode emoji */
    isNative: Emoji['isNative'];
    emojiSize: Emoji['size'];
    sheetSize: Emoji['sheetSize'];
    emojisToShowFilter?: (x: string) => boolean;
    showPreview: boolean;
    emojiTooltip: boolean;
    autoFocus: boolean;
    custom: any[];
    hideRecent: boolean;
    include?: string[];
    exclude?: string[];
    notFoundEmoji: string;
    categoriesIcons: {
        [key: string]: string;
    };
    searchIcons: {
        [key: string]: string;
    };
    useButton: boolean;
    enableFrequentEmojiSort: boolean;
    enableSearch: boolean;
    showSingleCategory: boolean;
    emojiClick: EventEmitter<any>;
    emojiSelect: EventEmitter<any>;
    skinChange: EventEmitter<1 | 4 | 2 | 3 | 5 | 6>;
    private scrollRef;
    private previewRef;
    private searchRef;
    private categoryRefs;
    scrollHeight: number;
    clientHeight: number;
    selected?: string;
    nextScroll?: string;
    scrollTop?: number;
    firstRender: boolean;
    recent?: string[];
    previewEmoji: any;
    leaveTimeout: any;
    NAMESPACE: string;
    measureScrollbar: number;
    RECENT_CATEGORY: EmojiCategory;
    SEARCH_CATEGORY: EmojiCategory;
    CUSTOM_CATEGORY: EmojiCategory;
    backgroundImageFn: Emoji['backgroundImageFn'];
    constructor(ref: ChangeDetectorRef, frequently: EmojiFrequentlyService);
    ngOnInit(): void;
    setActiveCategories(categoriesToMakeActive: Array<EmojiCategory>): void;
    updateCategoriesSize(): void;
    handleAnchorClick($event: {
        category: EmojiCategory;
        index: number;
    }): void;
    categoryTrack(index: number, item: any): any;
    handleScroll(): void;
    handleSearch($emojis: any[] | null): void;
    handleEnterKey($event: Event, emoji?: EmojiData): void;
    handleEmojiOver($event: EmojiEvent): void;
    handleEmojiLeave(): void;
    handleEmojiClick($event: EmojiEvent): void;
    handleSkinChange(skin: Emoji['skin']): void;
    getWidth(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PickerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PickerComponent, "emoji-mart", never, { "perLine": "perLine"; "totalFrequentLines": "totalFrequentLines"; "i18n": "i18n"; "style": "style"; "title": "title"; "emoji": "emoji"; "darkMode": "darkMode"; "color": "color"; "hideObsolete": "hideObsolete"; "categories": "categories"; "activeCategories": "activeCategories"; "set": "set"; "skin": "skin"; "isNative": "isNative"; "emojiSize": "emojiSize"; "sheetSize": "sheetSize"; "showPreview": "showPreview"; "emojiTooltip": "emojiTooltip"; "autoFocus": "autoFocus"; "custom": "custom"; "hideRecent": "hideRecent"; "notFoundEmoji": "notFoundEmoji"; "categoriesIcons": "categoriesIcons"; "searchIcons": "searchIcons"; "useButton": "useButton"; "enableFrequentEmojiSort": "enableFrequentEmojiSort"; "enableSearch": "enableSearch"; "showSingleCategory": "showSingleCategory"; "backgroundImageFn": "backgroundImageFn"; "emojisToShowFilter": "emojisToShowFilter"; "include": "include"; "exclude": "exclude"; }, { "emojiClick": "emojiClick"; "emojiSelect": "emojiSelect"; "skinChange": "skinChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2VyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwaWNrZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFbW9qaSwgRW1vamlDYXRlZ29yeSwgRW1vamlEYXRhLCBFbW9qaUV2ZW50IH0gZnJvbSAnQGN0cmwvbmd4LWVtb2ppLW1hcnQvbmd4LWVtb2ppJztcbmltcG9ydCB7IEVtb2ppRnJlcXVlbnRseVNlcnZpY2UgfSBmcm9tICcuL2Vtb2ppLWZyZXF1ZW50bHkuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgcmVmO1xuICAgIHByaXZhdGUgZnJlcXVlbnRseTtcbiAgICBwZXJMaW5lOiBudW1iZXI7XG4gICAgdG90YWxGcmVxdWVudExpbmVzOiBudW1iZXI7XG4gICAgaTE4bjogYW55O1xuICAgIHN0eWxlOiBhbnk7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBlbW9qaTogc3RyaW5nO1xuICAgIGRhcmtNb2RlOiBib29sZWFuO1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gICAgaGlkZU9ic29sZXRlOiBib29sZWFuO1xuICAgIC8qKiBhbGwgY2F0ZWdvcmllcyBzaG93biAqL1xuICAgIGNhdGVnb3JpZXM6IEVtb2ppQ2F0ZWdvcnlbXTtcbiAgICAvKiogdXNlZCB0byB0ZW1wb3JhcmlseSBkcmF3IGNhdGVnb3JpZXMgKi9cbiAgICBhY3RpdmVDYXRlZ29yaWVzOiBFbW9qaUNhdGVnb3J5W107XG4gICAgc2V0OiBFbW9qaVsnc2V0J107XG4gICAgc2tpbjogRW1vamlbJ3NraW4nXTtcbiAgICAvKiogUmVuZGVycyB0aGUgbmF0aXZlIHVuaWNvZGUgZW1vamkgKi9cbiAgICBpc05hdGl2ZTogRW1vamlbJ2lzTmF0aXZlJ107XG4gICAgZW1vamlTaXplOiBFbW9qaVsnc2l6ZSddO1xuICAgIHNoZWV0U2l6ZTogRW1vamlbJ3NoZWV0U2l6ZSddO1xuICAgIGVtb2ppc1RvU2hvd0ZpbHRlcj86ICh4OiBzdHJpbmcpID0+IGJvb2xlYW47XG4gICAgc2hvd1ByZXZpZXc6IGJvb2xlYW47XG4gICAgZW1vamlUb29sdGlwOiBib29sZWFuO1xuICAgIGF1dG9Gb2N1czogYm9vbGVhbjtcbiAgICBjdXN0b206IGFueVtdO1xuICAgIGhpZGVSZWNlbnQ6IGJvb2xlYW47XG4gICAgaW5jbHVkZT86IHN0cmluZ1tdO1xuICAgIGV4Y2x1ZGU/OiBzdHJpbmdbXTtcbiAgICBub3RGb3VuZEVtb2ppOiBzdHJpbmc7XG4gICAgY2F0ZWdvcmllc0ljb25zOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgICB9O1xuICAgIHNlYXJjaEljb25zOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgICB9O1xuICAgIHVzZUJ1dHRvbjogYm9vbGVhbjtcbiAgICBlbmFibGVGcmVxdWVudEVtb2ppU29ydDogYm9vbGVhbjtcbiAgICBlbmFibGVTZWFyY2g6IGJvb2xlYW47XG4gICAgc2hvd1NpbmdsZUNhdGVnb3J5OiBib29sZWFuO1xuICAgIGVtb2ppQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGVtb2ppU2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBza2luQ2hhbmdlOiBFdmVudEVtaXR0ZXI8MSB8IDQgfCAyIHwgMyB8IDUgfCA2PjtcbiAgICBwcml2YXRlIHNjcm9sbFJlZjtcbiAgICBwcml2YXRlIHByZXZpZXdSZWY7XG4gICAgcHJpdmF0ZSBzZWFyY2hSZWY7XG4gICAgcHJpdmF0ZSBjYXRlZ29yeVJlZnM7XG4gICAgc2Nyb2xsSGVpZ2h0OiBudW1iZXI7XG4gICAgY2xpZW50SGVpZ2h0OiBudW1iZXI7XG4gICAgc2VsZWN0ZWQ/OiBzdHJpbmc7XG4gICAgbmV4dFNjcm9sbD86IHN0cmluZztcbiAgICBzY3JvbGxUb3A/OiBudW1iZXI7XG4gICAgZmlyc3RSZW5kZXI6IGJvb2xlYW47XG4gICAgcmVjZW50Pzogc3RyaW5nW107XG4gICAgcHJldmlld0Vtb2ppOiBhbnk7XG4gICAgbGVhdmVUaW1lb3V0OiBhbnk7XG4gICAgTkFNRVNQQUNFOiBzdHJpbmc7XG4gICAgbWVhc3VyZVNjcm9sbGJhcjogbnVtYmVyO1xuICAgIFJFQ0VOVF9DQVRFR09SWTogRW1vamlDYXRlZ29yeTtcbiAgICBTRUFSQ0hfQ0FURUdPUlk6IEVtb2ppQ2F0ZWdvcnk7XG4gICAgQ1VTVE9NX0NBVEVHT1JZOiBFbW9qaUNhdGVnb3J5O1xuICAgIGJhY2tncm91bmRJbWFnZUZuOiBFbW9qaVsnYmFja2dyb3VuZEltYWdlRm4nXTtcbiAgICBjb25zdHJ1Y3RvcihyZWY6IENoYW5nZURldGVjdG9yUmVmLCBmcmVxdWVudGx5OiBFbW9qaUZyZXF1ZW50bHlTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIHNldEFjdGl2ZUNhdGVnb3JpZXMoY2F0ZWdvcmllc1RvTWFrZUFjdGl2ZTogQXJyYXk8RW1vamlDYXRlZ29yeT4pOiB2b2lkO1xuICAgIHVwZGF0ZUNhdGVnb3JpZXNTaXplKCk6IHZvaWQ7XG4gICAgaGFuZGxlQW5jaG9yQ2xpY2soJGV2ZW50OiB7XG4gICAgICAgIGNhdGVnb3J5OiBFbW9qaUNhdGVnb3J5O1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgIH0pOiB2b2lkO1xuICAgIGNhdGVnb3J5VHJhY2soaW5kZXg6IG51bWJlciwgaXRlbTogYW55KTogYW55O1xuICAgIGhhbmRsZVNjcm9sbCgpOiB2b2lkO1xuICAgIGhhbmRsZVNlYXJjaCgkZW1vamlzOiBhbnlbXSB8IG51bGwpOiB2b2lkO1xuICAgIGhhbmRsZUVudGVyS2V5KCRldmVudDogRXZlbnQsIGVtb2ppPzogRW1vamlEYXRhKTogdm9pZDtcbiAgICBoYW5kbGVFbW9qaU92ZXIoJGV2ZW50OiBFbW9qaUV2ZW50KTogdm9pZDtcbiAgICBoYW5kbGVFbW9qaUxlYXZlKCk6IHZvaWQ7XG4gICAgaGFuZGxlRW1vamlDbGljaygkZXZlbnQ6IEVtb2ppRXZlbnQpOiB2b2lkO1xuICAgIGhhbmRsZVNraW5DaGFuZ2Uoc2tpbjogRW1vamlbJ3NraW4nXSk6IHZvaWQ7XG4gICAgZ2V0V2lkdGgoKTogc3RyaW5nO1xufVxuIl19